// src/App.tsx
import { Route, BrowserRouter as Router, Routes } from "react-router-dom";
import { AuthProvider } from "./components/contexts/AuthContext";
import Navbar from './components/Navbar';
import PhoneNumberInput from "./components/PhoneNumberInput";
import PromptUpdater from "./components/Prompt";
import PropertyAnalysis from "./components/PropertyAnalysis";
import PropertyComparisonTable from "./components/PropertyComparisonTable";
import PropertyList from "./components/PropertyList";

function App() {
  return (
    <Router>
      <AuthProvider>
        <div className="App">
          <Navbar />
          <Routes>
            <Route path="/" element={<PropertyList />} />
            <Route path="/enter-phone" element={<PhoneNumberInput />} />
            <Route path="/prompt-update" element={<PromptUpdater />} />
            <Route path="/properties" element={<PropertyList />} />
            <Route path="/analyze" element={<PropertyAnalysis />} />
            <Route path="/property-analysis/:id" element={<PropertyAnalysis />} />
            <Route path="/property-analysis/:id/:taskId" element={<PropertyAnalysis />} />
            {/* Shared read-only route */}
            <Route path="/property-analysis/shared/:id/:taskId/:shareToken" element={<PropertyAnalysis />} />
            <Route path="/compare" element={<PropertyComparisonTable />} />
          </Routes>
        </div>
      </AuthProvider>
    </Router>
  );
}

export default App;

// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// src/propertyData.json
{
  "property_url": "https://www.onthemarket.com/details/15420358/",
  "stages": {
    "initial_categorization": [
      { "category": "internal", "details": { "room_type": "living room" } },
      { "category": "internal", "details": { "room_type": "stairway" } },
      { "category": "internal", "details": { "room_type": "stairway" } },
      { "category": "internal", "details": { "room_type": "bathroom" } },
      { "category": "external", "details": { "exterior_type": "backyard" } },
      { "category": "internal", "details": { "room_type": "attic bedroom" } },
      {
        "category": "others",
        "details": { "others": "energy efficiency rating" }
      },
      { "category": "external", "details": { "exterior_type": "patio" } },
      { "category": "internal", "details": { "room_type": "guest bedroom" } },
      { "category": "internal", "details": { "room_type": "kids' bedroom" } },
      { "category": "internal", "details": { "room_type": "teen bedroom" } },
      { "category": "external", "details": { "exterior_type": "driveway" } },
      { "category": "internal", "details": { "room_type": "guest bathroom" } },
      { "category": "internal", "details": { "room_type": "kitchen" } },
      { "category": "external", "details": { "exterior_type": "backyard" } },
      { "category": "internal", "details": { "room_type": "entryway" } },
      { "category": "internal", "details": { "room_type": "kids' bedroom" } },
      { "category": "internal", "details": { "room_type": "living room" } },
      { "category": "internal", "details": { "room_type": "music room" } },
      { "category": "internal", "details": { "room_type": "bathroom" } },
      { "category": "internal", "details": { "room_type": "home office" } },
      { "category": "internal", "details": { "room_type": "bedroom" } },
      { "category": "internal", "details": { "room_type": "living room" } },
      { "category": "internal", "details": { "room_type": "dining room" } },
      { "category": "internal", "details": { "room_type": "living room" } },
      { "category": "internal", "details": { "room_type": "stairway" } },
      { "category": "internal", "details": { "room_type": "bathroom" } },
      { "category": "external", "details": { "exterior_type": "backyard" } },
      { "category": "external", "details": { "exterior_type": "backyard" } },
      { "category": "internal", "details": { "room_type": "kitchen" } }
    ],
    "grouped_images": {
      "internal": {
        "living_space": [17, 18, 33, 34, 36, 38, 39, 40, 41, 16],
        "bathroom_space": [19, 35, 42, 28],
        "front_garden_space": [31],
        "bedroom_space": [32, 37, 21, 24, 25, 26],
        "kitchen_space": [45, 29]
      },
      "external": {
        "back_garden_space": [20, 43, 44, 23, 30],
        "front_garden_space": [27]
      },
      "others": { "others": [22] }
    },
    "merged_images": {
      "internal_living_space": [
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_7_EuvMTov.jpg",
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_8_IMZxp5q.jpg",
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_9_SXv7EzG.jpg"
      ],
      "internal_bathroom_space": [
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_10_RQF7eNd.jpg"
      ],
      "external_back_garden_space": [
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_11_pmoCANi.jpg",
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_12_FoqcNdM.jpg"
      ],
      "internal_front_garden_space": [
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_13_vlTAsXM.jpg"
      ],
      "internal_bedroom_space": [
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_14_kE0n7a7.jpg",
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_15_HAWVXLz.jpg"
      ],
      "internal_kitchen_space": [
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_16_2dl2bgu.jpg"
      ],
      "others_others": [
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_17_l9GS88X.jpg"
      ],
      "external_front_garden_space": [
        "https://propertyanalysisstorage.s3.amazonaws.com/media/merged_property_images/merged_image_18_OpUKb63.jpg"
      ]
    },
    "detailed_analysis": {
      "internal_living_space": [
        {
          "image_number": 1,
          "condition_label": "above average",
          "reasoning": "This space shows good quality finishes with a neat and well-maintained appearance. The hallway is clean, with modern lighting and a neutral color scheme. It appears to have been recently updated and maintained well, but does not have the high-end, luxurious finishes to be considered 'Excellent.'",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_20_tyuxWCj.jpg",
          "image_id": 36
        },
        {
          "image_number": 2,
          "condition_label": "above average",
          "reasoning": "This room features attractive decor and furnishings, with evidence of regular maintenance. The furniture is stylish, and the overall presentation is clean and well-organized with cohesive design elements. The space lacks any extraordinary, high-end features that would place it in the 'Excellent' category but is still of a good standard.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_22_vAKoer6.jpg",
          "image_id": 38
        }
      ],
      "internal_bathroom_space": [
        {
          "image_number": 1,
          "condition_label": "above_average",
          "reasoning": "Good quality finishes and fixtures with neat, well-maintained furniture and decor. The room is clean, well-presented, and has an attractive layout.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_3_H8KRms2.jpg",
          "image_id": 19
        },
        {
          "image_number": 2,
          "condition_label": "excellent",
          "reasoning": "High-end, modern finishes and fixtures with a stylish, contemporary design. Impeccable staging and presentation, matching the criteria for an 'excellent' rating.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_19_3YVzuKE.jpg",
          "image_id": 35
        },
        {
          "image_number": 3,
          "condition_label": "above_average",
          "reasoning": "Good quality finishes and well-maintained fixtures. The design is cohesive and the bathroom is neat with a pleasant aesthetic.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_26.jpg",
          "image_id": 42
        },
        {
          "image_number": 4,
          "condition_label": "excellent",
          "reasoning": "Modern and high-end finishes with a stylish presentation. The space is clean and well-organized, fitting the criteria for an 'excellent' rating.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_12_oCTWhJc.jpg",
          "image_id": 28
        }
      ],
      "external_back_garden_space": [
        {
          "image_number": 1,
          "condition_label": "excellent",
          "reasoning": "The outdoor space shows professional landscaping with well-maintained plants and a cohesive design. It includes desirable features like contemporary outdoor furniture, a well-maintained lawn, clean hardscaping, and an overall impeccable presentation, mirroring a show home standard.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_4_RKvIHEF.jpg",
          "image_id": 20
        },
        {
          "image_number": 2,
          "condition_label": "excellent",
          "reasoning": "The space features high-quality hardscaping and furniture, lush greenery, and well-maintained plants. It also has a cohesive design and a polished look, fitting the criteria for 'Excellent'.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_28.jpg",
          "image_id": 44
        },
        {
          "image_number": 3,
          "condition_label": "excellent",
          "reasoning": "The area features a cohesive layout with stylish furniture, well-trimmed plants, and a polished, clean aesthetic. The hardscaping is of high quality, and the space is staged professionally.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_14_2wkwgEf.jpg",
          "image_id": 30
        },
        {
          "image_number": 4,
          "condition_label": "excellent",
          "reasoning": "The outdoor setting is complete with high-end finishes, modern and stylish furniture, and an immaculately maintained lawn. The presentation and cohesive design elements are akin to a show home, fitting the 'Excellent' criteria.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_27.jpg",
          "image_id": 43
        }
      ],
      "internal_bedroom_space": [
        {
          "image_number": 1,
          "condition_label": "above_average",
          "reasoning": "The room is well-maintained with modern furniture and a cohesive, pleasant color scheme. The space is clear and not cluttered, featuring good natural light and a clean carpet. Decorations and toys are neatly arranged, providing an overall welcoming appearance.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_5_zJRKTKl.jpg",
          "image_id": 21
        },
        {
          "image_number": 2,
          "condition_label": "below_average",
          "reasoning": "The room shows signs of wear, especially on the walls with visible marks and an outdated wallpaper pattern. The furniture appears moderately maintained and the space lacks a cohesive design. The presence of clutter and the unevenly laid out items contribute to a less appealing, somewhat untidy look.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_16_Iai1CPU.jpg",
          "image_id": 32
        }
      ],
      "internal_kitchen_space": [
        {
          "image_number": 1,
          "condition_label": "excellent",
          "reasoning": "The kitchen is modern and well-lit with high-end finishes and fixtures. It features stylish, contemporary furniture and decor along with a cohesive design and impeccable presentation.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_29.jpg",
          "image_id": 45
        },
        {
          "image_number": 2,
          "condition_label": "above_average",
          "reasoning": "This kitchen has good quality finishes and fixtures, and is well-maintained. The layout is pleasant and the room is clean and well-presented, but it does not quite reach the high standard of a show home as seen in the 'excellent' examples.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_13_or0mTsr.jpg",
          "image_id": 29
        }
      ],
      "external_front_garden_space": [
        {
          "image_number": 1,
          "condition_label": "above_average",
          "reasoning": "The exterior appears well-maintained with a neat driveway and a presentable facade. The landscaping is tidy with no visible excessive weeds or overgrowth, though it lacks the professional landscaping and variety of plants characteristic of an 'excellent' classification.",
          "image_url": "https://propertyanalysisstorage.s3.amazonaws.com/media/property_images/property_2_image_11_jKOicJr.jpg",
          "image_id": 27
        }
      ]
    },
    "overall_condition": {
      "overall_condition_label": "Excellent",
      "average_score": 4.86,
      "distribution": {
        "above average": 0.14285714285714285,
        "excellent": 0.8571428571428571
      },
      "condition_distribution": {
        "above average": 14.285714285714285,
        "excellent": 85.71428571428571
      },
      "areas_of_concern": 0,
      "confidence": "Medium",
      "explanation": "\nDetailed calculation of overall property condition:\n\n1. Total number of valid assessments: 14\n\n2. Condition counts:\n   - Above average: 2\n   - Excellent: 12\n\n3. Calculation of average score:\n   - Each condition is assigned a value: Excellent (5), Above Average (4), Average (3), Below Average (2), Poor (1)\n   - Total value: 68 (sum of all condition values)\n   - Average score: 68 / 14 = 4.86\n\n4. Distribution of conditions:\n   - Above average: 14.29%\n   - Excellent: 85.71%\n\n5. Areas of concern (conditions below average): 0\n\n6. Overall rating determination:\n   - Excellent: 4.5 and above\n   - Good: 3.5 to 4.49\n   - Average: 2.5 to 3.49\n   - Below Average: 1.5 to 2.49\n   - Poor: Below 1.5\n\n   Based on the average score of 4.86, the overall rating is: Excellent\n\n7. Confidence level:\n   - High: More than 20 assessments\n   - Medium: 11 to 20 assessments\n   - Low: 10 or fewer assessments\n\n   Based on 14 assessments, the confidence level is: Medium\n"
    }
  },
  "Image_Analysis": {}
}


// src/App.css
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


// src/index.css
@tailwind base;
  @tailwind components;
  @tailwind utilities;

  @layer base {
    :root {
      --background: 0 0% 100%;
      --foreground: 222.2 84% 4.9%;

      --muted: 210 40% 96.1%;
      --muted-foreground: 215.4 16.3% 46.9%;

      --popover: 0 0% 100%;
      --popover-foreground: 222.2 84% 4.9%;

      --card: 0 0% 100%;
      --card-foreground: 222.2 84% 4.9%;

      --border: 214.3 31.8% 91.4%;
      --input: 214.3 31.8% 91.4%;

      --primary: 222.2 47.4% 11.2%;
      --primary-foreground: 210 40% 98%;

      --secondary: 210 40% 96.1%;
      --secondary-foreground: 222.2 47.4% 11.2%;

      --accent: 210 40% 96.1%;
      --accent-foreground: 222.2 47.4% 11.2%;

      --destructive: 0 84.2% 60.2%;
      --destructive-foreground: 210 40% 98%;

      --ring: 215 20.2% 65.1%;

      --radius: 0.5rem;
    }

    .dark {
      --background: 222.2 84% 4.9%;
      --foreground: 210 40% 98%;

      --muted: 217.2 32.6% 17.5%;
      --muted-foreground: 215 20.2% 65.1%;

      --popover: 222.2 84% 4.9%;
      --popover-foreground: 210 40% 98%;

      --card: 222.2 84% 4.9%;
      --card-foreground: 210 40% 98%;

      --border: 217.2 32.6% 17.5%;
      --input: 217.2 32.6% 17.5%;

      --primary: 210 40% 98%;
      --primary-foreground: 222.2 47.4% 11.2%;

      --secondary: 217.2 32.6% 17.5%;
      --secondary-foreground: 210 40% 98%;

      --accent: 217.2 32.6% 17.5%;
      --accent-foreground: 210 40% 98%;

      --destructive: 0 62.8% 30.6%;
      --destructive-foreground: 0 85.7% 97.3%;

      --ring: 217.2 32.6% 17.5%;
    }
  }

  @layer base {
    * {
      @apply border-border;
    }
    body {
      @apply bg-background text-foreground;
    }
}


// src/types.ts
export interface PropertyData {
    id: number;
    url: string;
    property_url: string;
    address: string;
    price: string;
    bedrooms: number;
    bathrooms: number;
    size: string;
    house_type: string;
    agent: string;
    description: string;
    image_urls: string[];
    floorplan_urls: string[];
    overall_analysis: {
      property_url: string;
      stages: {
        initial_categorization: Array<{
          category: string;
          details: {
            room_type?: string;
            exterior_type?: string;
            others?: string;
          };
        }>;
        grouped_images: {
          [key: string]: {
            [key: string]: number[];
          };
        };
        merged_images: {
          [key: string]: string[];
        };
        detailed_analysis: {
          [key: string]: Array<{
            condition_label: string;
            condition_score: number;
            image_id: number;
            image_number: number;
            image_url: string;
            reasoning: string;
            similarities: { [key: string]: number };
          }>;
        };
        overall_condition: {
          overall_condition_label: string;
          average_score: number;
          label_distribution: {
            [key: string]: number;
          };
          total_assessments: number;
          areas_of_concern: number;
          confidence: string;
          explanation: string;
        };
      }
    }
  }
  
  export interface ProgressUpdate {
    stage: string;
    message: string;
    progress: number;
  }

// src/vite-env.d.ts
// vite-env.d.ts
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_BACKEND_API_URL: string;
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}

// src/shadcn-ui.d.ts
declare module '@/components/ui/carousel' {
    export const Carousel: React.FC<React.HTMLAttributes<HTMLDivElement>>;
    export const CarouselContent: React.FC<React.HTMLAttributes<HTMLDivElement>>;
    export const CarouselItem: React.FC<React.HTMLAttributes<HTMLDivElement>>;
    export const CarouselNext: React.FC<React.ButtonHTMLAttributes<HTMLButtonElement>>;
    export const CarouselPrevious: React.FC<React.ButtonHTMLAttributes<HTMLButtonElement>>;
  }
  
  declare module '@/components/ui/card' {
    export const Card: React.FC<React.HTMLAttributes<HTMLDivElement>>;
    export const CardContent: React.FC<React.HTMLAttributes<HTMLDivElement>>;
    export const CardHeader: React.FC<React.HTMLAttributes<HTMLDivElement>>;
    export const CardTitle: React.FC<React.HTMLAttributes<HTMLHeadingElement>>;
  }

  declare module '@/components/ui/tabs' {
    import * as React from 'react';
  
    interface TabsProps extends React.HTMLAttributes<HTMLDivElement> {
      defaultValue?: string;
      value?: string;
      onValueChange?: (value: string) => void;
    }
  
    interface TabsListProps extends React.HTMLAttributes<HTMLDivElement> {}
  
    interface TabsTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
      value: string;
    }
  
    interface TabsContentProps extends React.HTMLAttributes<HTMLDivElement> {
      value: string;
    }
  
    export const Tabs: React.FC<TabsProps>;
    export const TabsList: React.FC<TabsListProps>;
    export const TabsTrigger: React.FC<TabsTriggerProps>;
    export const TabsContent: React.FC<TabsContentProps>;
  }
  
  declare module '@/components/ui/input' {
    export const Input: React.FC<React.InputHTMLAttributes<HTMLInputElement>>;
  }
  
  declare module '@/components/ui/button' {
    import { VariantProps } from 'class-variance-authority';
    import { buttonVariants } from './button';
  
    export interface ButtonProps
      extends React.ButtonHTMLAttributes<HTMLButtonElement>,
        VariantProps<typeof buttonVariants> {
      asChild?: boolean;
    }
  
    export const Button: React.FC<ButtonProps>;
  }  
  
  declare module '@/components/ui/alert' {
    import { VariantProps } from "class-variance-authority";
    import { alertVariants } from "./alert";
  
    export interface AlertProps
      extends React.HTMLAttributes<HTMLDivElement>,
        VariantProps<typeof alertVariants> {}
  
    export const Alert: React.FC<AlertProps>;
    export const AlertDescription: React.FC<React.HTMLAttributes<HTMLDivElement>>;
    export const AlertTitle: React.FC<React.HTMLAttributes<HTMLHeadingElement>>;
  }

  declare module '@/components/ui/dialog' {
    import * as React from 'react';
  
    interface DialogProps extends React.ComponentPropsWithoutRef<'div'> {
      open?: boolean;
      onOpenChange?: (open: boolean) => void;
    }
  
    interface DialogContentProps extends React.ComponentPropsWithoutRef<'div'> {
      forceMount?: true;
    }
  
    interface DialogTriggerProps extends React.ComponentPropsWithoutRef<'button'> {
      asChild?: boolean;
    }
  
    interface DialogTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {
      size?: 'default' | 'large';
    }
  
    interface DialogDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {
      size?: 'default' | 'large';
    }
  
    export const Dialog: React.FC<DialogProps>;
    export const DialogContent: React.FC<DialogContentProps>;
    export const DialogTrigger: React.FC<DialogTriggerProps>;
    export const DialogTitle: React.FC<DialogTitleProps>;
    export const DialogDescription: React.FC<DialogDescriptionProps>;
  }
  
  declare module '@/components/ui/visually-hidden' {
    import * as React from 'react';
  
    export const VisuallyHidden: React.FC<React.HTMLAttributes<HTMLSpanElement>>;
  }

declare module '@/components/ui/table' {
  import * as React from 'react';

  export const Table: React.FC<React.TableHTMLAttributes<HTMLTableElement>>;
  export const TableBody: React.FC<React.HTMLAttributes<HTMLTableSectionElement>>;
  export const TableCell: React.FC<React.TdHTMLAttributes<HTMLTableCellElement>>;
  export const TableHead: React.FC<React.ThHTMLAttributes<HTMLTableCellElement>>;
  export const TableHeader: React.FC<React.HTMLAttributes<HTMLTableSectionElement>>;
  export const TableRow: React.FC<React.HTMLAttributes<HTMLTableRowElement>>;
}

declare module '@/components/ui/progress' {
  export const Progress: React.FC<React.ProgressHTMLAttributes<HTMLProgressElement>>;
}


// src/utils/axiosConfig.ts
import axios from 'axios';

const axiosInstance = axios.create({
  // baseURL: 'http://localhost:8000',
  baseURL: import.meta.env.VITE_BACKEND_API_URL || 'https://api.supersami.com',
  // baseURL: import.meta.env.VITE_BACKEND_API_URL || 'https://api-test.supersami.com',
  withCredentials: true, // Important for sending cookies if needed
});

// Function to get access token from localStorage
function getAccessToken(): string | null {
  return localStorage.getItem('accessToken');
}

// Function to get refresh token from localStorage
function getRefreshToken(): string | null {
  return localStorage.getItem('refreshToken');
}

// Function to set tokens in localStorage
function setTokens(access: string, refresh: string) {
  localStorage.setItem('accessToken', access);
  localStorage.setItem('refreshToken', refresh);
}

// Function to remove tokens from localStorage
function removeTokens() {
  localStorage.removeItem('accessToken');
  localStorage.removeItem('refreshToken');
}

function getCsrfToken() {
  return document.cookie
    .split('; ')
    .find((row) => row.startsWith('csrftoken='))
    ?.split('=')[1];
}

// Request interceptor to add Authorization header
axiosInstance.interceptors.request.use(
  function (config) {
    const csrfToken = getCsrfToken();
    if (csrfToken) {
      config.headers['X-CSRFToken'] = csrfToken;
    }

    const accessToken = getAccessToken();
    if (accessToken) {
      config.headers['Authorization'] = `Bearer ${accessToken}`;
    }
    return config;
  },
  function (error) {
    return Promise.reject(error);
  },
);

// Response interceptor to handle 401 errors and refresh tokens
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    if (
      error.response?.status === 401 &&
      !originalRequest._retry &&
      getRefreshToken()
    ) {
      originalRequest._retry = true;
      try {
        const response = await axios.post(
          `${axiosInstance.defaults.baseURL}/api/auth/token/refresh/`,
          { refresh: getRefreshToken() },
        );
        const { access, refresh } = response.data;
        setTokens(access, refresh);
        originalRequest.headers['Authorization'] = `Bearer ${access}`;
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        console.error('Token refresh failed:', refreshError);
        removeTokens();
        // Optionally, redirect to login page or notify the user
        return Promise.reject(refreshError);
      }
    }
    return Promise.reject(error);
  },
);

export const isAxiosError = axios.isAxiosError;

export default axiosInstance;


// src/components/Prompt.tsx
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Eye, EyeOff, Loader2, Save } from 'lucide-react';
import { FormEvent, useEffect, useState } from 'react';
import axiosInstance from "..//utils/axiosConfig";

interface Prompt {
  name: string;
  content: string;
  version?: number;
  is_active?: boolean;
}

const PromptUpdater = () => {
  const [content, setContent] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showCurrentPrompt, setShowCurrentPrompt] = useState(true);
  const [responseMessage, setResponseMessage] = useState('');
  const [responseType, setResponseType] = useState<'success' | 'error'>('success');
  const [currentPrompt, setCurrentPrompt] = useState<Prompt | null>(null);

  const promptName = 'labelling_prompt';

  useEffect(() => {
    const fetchCurrentPrompt = async () => {
      setIsLoading(true);
      try {
        const response = await axiosInstance.get(`/api/analysis/get-prompt/?name=${encodeURIComponent(promptName)}`);
        const data: Prompt = response.data
        setCurrentPrompt(data);
        // Pre-fill form with current content and spaces
        setContent(data.content);
      } catch (err) {
        setResponseType('error');
        setResponseMessage('Failed to fetch current prompt');
        setCurrentPrompt(null);
      } finally {
        setIsLoading(false);
      }
    };

    fetchCurrentPrompt();
  }, []);

  const updatePrompt = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      const response = await axiosInstance.post('/api/analysis/update-prompt/', {
        name: promptName,
        content: content
      });
      
      setResponseType('success');
      setResponseMessage(response.data.message || 'Prompt updated successfully!');
      
      // Optionally refresh the current prompt after successful update
      const updatedPrompt = await axiosInstance.get(`/api/analysis/get-prompt/?name=${encodeURIComponent(promptName)}`);
      setCurrentPrompt(updatedPrompt.data);
    } catch (error) {
      console.error('Error updating prompt:', error);
      setResponseType('error');
      setResponseMessage('Error updating prompt. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-6">
      <div className="mb-8 flex items-center justify-between">
        <h1 className="text-3xl font-bold text-gray-900">Prompt Manager</h1>
        <button
          onClick={() => setShowCurrentPrompt(!showCurrentPrompt)}
          className="flex items-center gap-2 px-4 py-2 text-sm rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
        >
          {showCurrentPrompt ? (
            <>
              <EyeOff className="w-4 h-4" />
              Hide Current
            </>
          ) : (
            <>
              <Eye className="w-4 h-4" />
              Show Current
            </>
          )}
        </button>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {showCurrentPrompt && (
          <div className="p-6 rounded-lg bg-gray-50 border border-gray-200">
            <h2 className="text-xl font-semibold mb-4">Current Prompt (Version {currentPrompt?.version || '0'})</h2>
            <div className="bg-white p-4 rounded-md border border-gray-200 h-[500px] overflow-auto">
              <pre className="whitespace-pre-wrap font-mono text-sm">
                {currentPrompt?.content || 'No current prompt found'}
              </pre>
            </div>
          </div>
        )}

        <div className={`p-6 rounded-lg bg-white border border-gray-200 ${!showCurrentPrompt ? 'lg:col-span-2' : ''}`}>
          <h2 className="text-xl font-semibold mb-4">New Prompt</h2>
          <form onSubmit={updatePrompt} className="space-y-4">
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder="Enter the new prompt content..."
              className="w-full h-[500px] p-4 rounded-md border border-gray-200 font-mono text-sm resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
            
            <div className="flex items-center justify-between">
              <button
                type="submit"
                disabled={isLoading}
                className="flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin" />
                    Updating...
                  </>
                ) : (
                  <>
                    <Save className="w-5 h-5" />
                    Update Prompt
                  </>
                )}
              </button>

              {responseMessage && (
                <Alert className={`w-auto ${responseType === 'success' ? 'bg-green-50' : 'bg-red-50'}`}>
                  <AlertDescription className={`text-sm ${responseType === 'success' ? 'text-green-800' : 'text-red-800'}`}>
                    {responseMessage}
                  </AlertDescription>
                </Alert>
              )}
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default PromptUpdater;

// src/components/Navbar.tsx
import { Link } from 'react-router-dom';
import { useAuth } from '../components/contexts/AuthContext';

const Navbar = () => {
  const { logout } = useAuth();
  const isAuthenticated = Boolean(localStorage.getItem('accessToken'));

  return (
    <nav className="bg-white shadow-md">
      <div className="flex justify-between items-center w-full py-4 px-6">
        <Link to="/" className="text-2xl font-bold text-indigo-600 hover:text-indigo-700">
          PropertyAnalyzer
        </Link>
        {isAuthenticated && (
          <button
            onClick={logout}
            className="px-4 py-2 text-white bg-indigo-600 hover:bg-indigo-700 rounded-md font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          >
            Come Back Later
          </button>
        )}
      </div>
    </nav>
  );
};

export default Navbar;


// src/components/PropertySummary.tsx
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
// import React from 'react';
// import { Bar, BarChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";
// import { PropertyData } from '../types';
// import ConditionScale from './ConditionScale';
// import CustomTick from './CustomTick';

// interface PropertySummaryProps {
//   propertyData: PropertyData;
// }

// export const PropertySummary: React.FC<PropertySummaryProps> = ({ propertyData }) => {
//   const overallCondition = propertyData.overall_analysis.stages.overall_condition;
//   const labelDistribution = overallCondition.label_distribution;
//   const totalAssessments = overallCondition.total_assessments;

//   const conditionData = ["Excellent", "Above Average", "Below Average", "Poor"].map((label) => ({
//     name: label,
//     value: Number(labelDistribution[label] || 0) * Number(totalAssessments),
//   }));

//   return (
//     <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//       {/* Overall Condition Card */}
//       <Card>
//         <CardHeader>
//           <CardTitle>Overall Condition</CardTitle>
//         </CardHeader>
//         <CardContent>
//           <p className="text-3xl font-bold mb-4">
//             {overallCondition.overall_condition_label} ({overallCondition.average_score}%)
//           </p>
//           <div className="space-y-2">
//             <ConditionScale 
//               score={overallCondition.average_score}
//               label={overallCondition.overall_condition_label}
//             />
//             <p>
//               <span className="font-semibold">Confidence:</span>{" "}
//               {overallCondition.confidence}
//             </p>
//             <p>
//               <span className="font-semibold">Areas of Concern:</span>{" "}
//               {overallCondition.areas_of_concern}
//             </p>
//           </div>
//         </CardContent>
//       </Card>

//       {/* Condition Distribution Chart */}
//       <Card>
//         <CardHeader>
//           <CardTitle>Condition Distribution</CardTitle>
//         </CardHeader>
//         <CardContent>
//           <ResponsiveContainer width="100%" height={250}>
//             <BarChart data={conditionData} margin={{ bottom: 60 }}>
//               <CartesianGrid strokeDasharray="3 3" />
//               <XAxis
//                 dataKey="name"
//                 interval={0}
//                 tick={CustomTick}
//                 height={60}
//               />
//               <YAxis allowDecimals={false} />
//               <Tooltip />
//               <Bar dataKey="value" fill="#6366F1" />
//             </BarChart>
//           </ResponsiveContainer>
//         </CardContent>
//       </Card>

//       {/* Detailed Explanation */}
//       <Card className="col-span-1 md:col-span-2">
//         <CardHeader>
//           <CardTitle>Detailed Explanation</CardTitle>
//         </CardHeader>
//         <CardContent>
//           <div className="text-gray-700 leading-relaxed space-y-4">
//             {overallCondition.explanation ? (
//               overallCondition.explanation.split('\n').map((para, idx) => (
//                 <p key={idx} className="mb-2">{para}</p>
//               ))
//             ) : (
//               <p>No explanation available.</p>
//             )}
//           </div>
//         </CardContent>
//       </Card>
//     </div>
//   );
// };


// src/components/PropertyDataTab.tsx
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
// import { PropertyData } from "../types";
// import { ImageGallery } from "./ImageGallery";

// interface PropertyDataTabProps {
//   propertyData: PropertyData;
// }

// export const PropertyDataTab: React.FC<PropertyDataTabProps> = ({ propertyData }) => {
//   const propertyFields = [
//     { label: "Address", value: propertyData.address },
//     { label: "Price", value: propertyData.price },
//     { label: "Bedrooms", value: propertyData.bedrooms },
//     { label: "Bathrooms", value: propertyData.bathrooms },
//     { label: "Size", value: propertyData.size },
//     { label: "House Type", value: propertyData.house_type },
//     { label: "Agent", value: propertyData.agent },
//   ];

//   return (
//     <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
//       {/* Basic Property Information */}
//       <Card>
//         <CardHeader>
//           <CardTitle>Property Details</CardTitle>
//         </CardHeader>
//         <CardContent>
//           <div className="space-y-4">
//             {propertyFields.map((field) => (
//               <div key={field.label} className="flex justify-between items-center">
//                 <span className="font-medium text-gray-600">{field.label}</span>
//                 <span>{field.value}</span>
//               </div>
//             ))}
//           </div>
//         </CardContent>
//       </Card>

//       {/* Property Description */}
//       <Card>
//         <CardHeader>
//           <CardTitle>Description</CardTitle>
//         </CardHeader>
//         <CardContent>
//           <p className="text-gray-700 whitespace-pre-line">{propertyData.description}</p>
//         </CardContent>
//       </Card>

//       {/* Property Images */}
//       <Card className="col-span-1 md:col-span-2">
//         <CardHeader>
//           <CardTitle>Property Images</CardTitle>
//         </CardHeader>
//         <CardContent>
//           <ImageGallery images={propertyData.image_urls} />
//         </CardContent>
//       </Card>

//       {/* Floorplans */}
//       {propertyData.floorplan_urls?.length > 0 && (
//         <Card className="col-span-1 md:col-span-2">
//           <CardHeader>
//             <CardTitle>Floorplans</CardTitle>
//           </CardHeader>
//           <CardContent>
//             <ImageGallery images={propertyData.floorplan_urls} />
//           </CardContent>
//         </Card>
//       )}
//     </div>
//   );
// };

// src/components/PropertyTabs.tsx
// import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
// import { PropertyData } from "../types";
// import { DetailedAnalysis } from "./DetailedAnalysis";
// import { PropertyDataTab } from "./PropertyDataTab";
// import { PropertySummary } from "./PropertySummary";

// interface PropertyTabsProps {
//   propertyData: PropertyData;
// }

// export const PropertyTabs: React.FC<PropertyTabsProps> = ({ propertyData }) => {
//   return (
//     <Tabs defaultValue="summary" className="w-full">
//       <TabsList className="w-full flex justify-center mb-6">
//         <TabsTrigger value="summary" className="flex-1">Summary</TabsTrigger>
//         <TabsTrigger value="detailed" className="flex-1">Detailed Analysis</TabsTrigger>
//         <TabsTrigger value="property_data" className="flex-1">Property Data</TabsTrigger>
//       </TabsList>
      
//       <TabsContent value="summary">
//         <PropertySummary propertyData={propertyData} />
//       </TabsContent>
      
//       <TabsContent value="detailed">
//         <DetailedAnalysis propertyData={propertyData} />
//       </TabsContent>
      
//       <TabsContent value="property_data">
//         <PropertyDataTab propertyData={propertyData} />
//       </TabsContent>
//     </Tabs>
//   );
// };

// src/components/AnalysisForm.tsx
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import React from 'react';

interface AnalysisFormProps {
  url: string;
  setUrl: (url: string) => void;
  onSubmit: (e: React.FormEvent) => Promise<void>;
  loading: boolean;
}

export const AnalysisForm: React.FC<AnalysisFormProps> = ({
  url,
  setUrl,
  onSubmit,
  loading
}) => {
  return (
    <form onSubmit={onSubmit} className="mb-8">
      <div className="flex flex-col sm:flex-row sm:items-center space-y-4 sm:space-y-0 sm:space-x-4">
        <Input
          type="text"
          value={url}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUrl(e.target.value)}
          placeholder="Enter property URL"
          className="flex-grow"
        />
        <Button
          type="submit"
          disabled={loading}
          className="bg-indigo-600 hover:bg-indigo-700 text-white"
        >
          {loading ? "Analyzing..." : "Analyze"}
        </Button>
      </div>
    </form>
  );
};

// src/components/PhoneNumberInput.tsx
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { parsePhoneNumberFromString } from 'libphonenumber-js';
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from "../components/contexts/AuthContext";

const PhoneNumberInput: React.FC = () => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();
  const { loginWithPhone } = useAuth();

  const validatePhoneNumber = (number: string): boolean => {
    const phoneNumberObject = parsePhoneNumberFromString(number);
    return phoneNumberObject ? phoneNumberObject.isValid() : false;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (validatePhoneNumber(phoneNumber)) {
      try {
        const formattedPhoneNumber = phoneNumber.replace('+', '');
        console.log(formattedPhoneNumber)
        await loginWithPhone(formattedPhoneNumber);
        navigate('/properties');
      } catch(error) {
        console.error('Authentication failed:', error);
        setError('Authentication failed. Please try again.');
      };
    } else {
      setError('Please enter a valid international phone number, e.g., +123456789.');
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-md">
      <h1 className="text-3xl font-bold mb-6 text-gray-800">Enter Your Phone Number</h1>
      <form onSubmit={handleSubmit}>
        <div className="mb-4">
          <Input
            type="tel"
            placeholder="+123456789"
            value={phoneNumber}
            onChange={(e) => setPhoneNumber(e.target.value)}
            className="w-full"
          />
        </div>
        {error && (
          <div className="text-red-600 mb-4">
            {error}
          </div>
        )}
        <Button type="submit" className="w-full bg-indigo-600 hover:bg-indigo-700 text-white">
          Continue
        </Button>
      </form>
    </div>
  );
};

export default PhoneNumberInput;


// src/components/PropertyAnalysis.tsx
import ConditionScale from "@/components/ConditionScale";
import ShareButton from '@/components/ShareButton';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { Dialog, DialogContent, DialogDescription, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { VisuallyHidden } from "@/components/ui/visually-hidden";
import React, { useEffect, useState } from "react";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import {
  Bar,
  BarChart,
  CartesianGrid,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from "recharts";
import axiosInstance from "..//utils/axiosConfig";
import { useAuth } from "../components/contexts/AuthContext";
import { onMessage, removeMessageListener } from "../services/websocketServices";
import CustomTick from './CustomTick';

interface SentimentAnalysis {
  key_phrases: string[];
  tone_analysis: { [key: string]: number };
  sentiment_score: number;
  overall_sentiment: string;
  improvement_suggestions: string[];
  marketing_effectiveness: string;
}

interface DescriptionAnalysis {
  rating: string;
  label: string;
}

interface PropertySpace {
  category: string;
  spacePercentage: number;  // e.g., 30 for 30%
  sqft: number;
  sqm: number;
  costSpace: number;        // or string if your backend sends e.g. "£93,363"
  otherCost: number;        // or string
}

interface DetailedViewItem {
  floor: string;            // e.g., "Ground Floor"
  spaceType: string;        // e.g., "Living"
  spaceName: string;        // e.g., "Snug"
  areaSqftPercentage: number;
  areaSqft: number;
  areaSqm: number;
  pricePerSpace: number;    // or string
}

interface FloorplanAnalysis2 {
  propertySpaces: PropertySpace[];
  detailedView: DetailedViewItem[];
}

interface SentimentAnalysis {
  key_phrases: string[];
  tone_analysis: { [key: string]: number };
  sentiment_score: number;
  overall_sentiment: string;
  improvement_suggestions: string[];
  marketing_effectiveness: string;
}

interface DescriptionAnalysis {
  rating: string;
  label: string;
}

export interface PropertyData {
  id: number;
  url: string;
  property_url: string;
  address: string;
  price: string;
  bedrooms: number;
  bathrooms: number;
  size: string;
  house_type: string;
  agent: string;
  description: string;
  reviewed_description: string;
  image_urls: string[];
  floorplan_urls: string[];
  sentiment_analysis?: SentimentAnalysis;
  description_analysis?: DescriptionAnalysis;
  overall_condition: {
    areas_of_concern: number;
    average_score: number;
    confidence: string;
    explanation: string;
    label_distribution: { [key: string]: number };
    overall_condition_label: string;
    total_assessments: number;
  };
  detailed_analysis: {
    [key: string]: Array<{
      condition_label: string;
      condition_score: number;
      image_id: number;
      image_number: number;
      image_url: string;
      reasoning: string;
      similarities: { [key: string]: number };
    }>;
  };
  images: Array<{
    id: number;
    image: string;
    original_url: string;
    main_category: string;
    sub_category: string;
    room_type: string;
    reasoning: string;
  }>;
  failed_downloads: any[];
  overall_analysis: {
    property_url: string;
    stages: {
      initial_categorization: Array<{
        category: string;
        details: {
          room_type?: string;
          exterior_type?: string;
          others?: string;
        };
      }>;
      grouped_images: {
        [key: string]: {
          [key: string]: number[];
        };
      };
      merged_images: {
        [key: string]: string[];
      };
      detailed_analysis: {
        [key: string]: Array<{
          condition_label: string;
          condition_score: number;
          image_id: number;
          image_number: number;
          image_url: string;
          reasoning: string;
          similarities: { [key: string]: number };
        }>;
      };
      overall_condition: {
        overall_condition_label: string;
        average_score: number;
        label_distribution: {
          [key: string]: number;
        };
        total_assessments: number;
        areas_of_concern: number;
        confidence: string;
        explanation: string;
      };
      floorplan_analysis?: Array<{
        url: string;
        analysis: {
          color: string;
          dimension_type: string;
          drawing_type: string;
          background_image_in_blueprint: boolean;
          number_buildings: number;
          number_floors: number;
          bay_windows: boolean;
          curved_walls_windows: boolean;
          garden: boolean;
          total_square_area: string;
          main_building_square_area: string;
          compass_direction: string;
          key_observations: string;
        };
      }>;
      // New Floorplan Analysis 2
      floorplan_analysis_2?: FloorplanAnalysis2;
    };
  };
}


interface ProgressUpdate {
  stage: string;
  message: string;
  progress: number;
}


const PropertyAnalysis: React.FC<{}> = () => {
  const { id, taskId, shareToken } = useParams<{ id: string; taskId?: string; shareToken?: string }>();
  const [url, setUrl] = useState<string>("");
  const [propertyData, setPropertyData] = useState<PropertyData | null>(null);
  const [error, setError] = useState<string>("");
  const [dataLoading, setDataLoading] = useState<boolean>(false);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [progressUpdate, setProgressUpdate] = useState<ProgressUpdate | null>(null);
  const [fetchingResults, setFetchingResults] = useState(false);
  const { isConnected, connectToWebSocket } = useAuth();

  const [analysisStatus, setAnalysisStatus] = useState<string>("");
  const [analysisProgress, setAnalysisProgress] = useState<number>(0);
  const [analysisInProgress, setAnalysisInProgress] = useState<boolean>(!!taskId);
  const [analysisComplete, setAnalysisComplete] = useState<boolean>(false);
  const [authenticated, setAuthenticated] = useState<boolean>(false);

  const navigate = useNavigate();
  const location = useLocation();  
  const { loginWithToken } = useAuth();
  const queryParams = new URLSearchParams(location.search);
  const whatsappToken = queryParams.get('token');

  // Check if we are in shared read-only mode:
  const isSharedView = !!shareToken; // If shareToken is present in URL, it's a shared link.

  useEffect(() => {
    // If we are in shared mode, we do NOT attempt to log in or authenticate the user.
    if (isSharedView && id && shareToken && taskId) {
      fetchSharedPropertyData(id, shareToken);
      return;
    }

    if (whatsappToken) {
      try {
        loginWithToken(whatsappToken).then(() => {
          // Proceed to fetch property data
          if (id) {
            fetchPropertyData(id);
          }
        })
        // Authentication successful
        setAuthenticated(true);
      } catch (error) {
        console.error('Token authentication failed:', error);
        setError('Authentication failed. Please try again.');
      };
    } else {
      // No token present
      // Check if user is authenticated via session
      const checkAuthentication = async () => {
        try {
          const response = await axiosInstance.get('/api/auth/check-authenticated/');
          if (response.status === 200) {
            setAuthenticated(true);
            if (id) {
              fetchPropertyData(id);
            }
          } else {
            // Not authenticated
            navigate('/enter-phone');
          }
        } catch (error) {
          console.error('Error checking authentication:', error);
          navigate('/enter-phone');
        }
      };
      checkAuthentication();
    }
  }, [whatsappToken, id, navigate, isSharedView, shareToken, taskId, loginWithToken]);
  
  useEffect(() => {
    if (!isConnected && !isSharedView) {
      connectToWebSocket();
    }

    if (!isSharedView && taskId && !analysisComplete) {
      setAnalysisInProgress(true);
      const handleMessage = (message: any) => {
        console.log("Received WebSocket message:", message);
        if (message.type === 'analysis_progress') {
          setProgressUpdate(message.message);
          if (message.message.stage === 'error') {
            setError(message.message.message);
            setAnalysisInProgress(false);
          } else if (message.message.stage === 'complete') {
            console.log("Analysis complete, fetching results...");
            setAnalysisInProgress(false);
            setAnalysisComplete(true);
            fetchAnalysisResults();
          }
        }
      };
  
      onMessage(handleMessage);
      
      return () => {
        removeMessageListener(handleMessage);
      };
    }
  }, [id, isConnected, connectToWebSocket, taskId, isSharedView]);

  // Optionally, update analysisInProgress when taskId changes
  useEffect(() => {
    setAnalysisInProgress(!!taskId);
  }, [taskId]);

  const handleCompare = () => {
    navigate("/compare");
  };

  const fetchPropertyData = async (propertyId: string) => {
    setDataLoading(true);
  
    try {
      const response = await axiosInstance.get(`/api/orchestration/properties/${propertyId}/`);
      console.log("Fetched property data:", response.data);
      setPropertyData(response.data);
    } catch (error) {
      console.error("Error fetching property data:", error);
      setError("Failed to fetch property data. Please try again.");
    } finally {
      setDataLoading(false);
    }
  };

  const fetchSharedPropertyData = async (propertyId: string, shareToken: string) => {
    setDataLoading(true);
    try {
      const response = await axiosInstance.get(`/api/orchestration/properties/${propertyId}/shared/${shareToken}/`);
      console.log("Fetched shared property data:", response.data);
      setPropertyData(response.data);
      // Note: No WebSocket or progress updates in shared mode,
      // this is a static view of the completed analysis.
      setAnalysisInProgress(false);
      setAuthenticated(false); // They are not logged in as the owner.
    } catch (error) {
      console.error("Error fetching shared property data:", error);
      setError("Failed to fetch shared property data. Please try again.");
    } finally {
      setDataLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setDataLoading(true);
    setPropertyData(null);
    setProgressUpdate(null);

    try {
      const response = await axiosInstance.post(
        `/api/orchestration/properties/analyze/`,
        {
          url
        },
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
      console.log("Analysis initiated, task ID:", response.data.task_id);
      // setTaskId(response.data.task_id);

      // Navigate to the analysis page with the taskId
      navigate(`/property-analysis/${response.data.property_id}/${response.data.task_id}`);
    } catch (error) {
      console.error("Error initiating analysis:", error);
      setError("An error occurred while analyzing the property. Please try again.");
      setDataLoading(false);
    }
  };

  const fetchAnalysisResults = async () => {
    if (!taskId) return;

    // setFetchingResults(true);
    try {
      const response = await axiosInstance.get(`/api/orchestration/properties/${taskId}/results/`);
      if (response.status === 202) {
        // Analysis not yet complete
        setAnalysisStatus(response.data.status);
        setAnalysisProgress(response.data.progress);

        // Show fetching state now (only while we continue polling)
        setFetchingResults(true);
        
        // Retry after a delay
        setTimeout(fetchAnalysisResults, 5000);
      } else if (response.data) {
        // Final results
        setPropertyData(response.data);
        setAnalysisInProgress(false);
        
        // Analysis is done, so no more fetching
        setAnalysisComplete(true);
        setFetchingResults(false);
      } else {
        console.error("No data received from the server");
        setError("No analysis results received. Please try again.");
      }
    } catch (error) {
      console.error("Error fetching analysis results:", error);
      setError("Failed to fetch analysis results. Please try again.");
    }
  };

  const renderAnalysis = () => {
    if (!propertyData?.overall_analysis?.stages) return null;

    // Extract data from propertyData
    const overallCondition = propertyData.overall_analysis.stages.overall_condition ?? {};
    const labelDistribution = overallCondition.label_distribution ?? {};
    const totalAssessments = overallCondition.total_assessments ?? 0;

    // Log the data for debugging
    // console.log('Overall Condition:', overallCondition);
    // console.log('Label Distribution:', labelDistribution);
    // console.log('Total Assessments:', totalAssessments);

    // Check if totalAssessments is zero
    if (totalAssessments === 0) {
      console.warn('Total assessments is zero. The condition distribution chart will be empty.');
    }

    const allLabels = ["Excellent", "Above Average", "Below Average", "Poor"];

    // Construct conditionData
    const conditionData = allLabels.map((label) => ({
      name: label,
      value: Number(labelDistribution[label] || 0) * Number(totalAssessments),
    }));

    // Log conditionData
    console.log('Condition Data:', conditionData);

    const analyzedImages = Object.values(propertyData.overall_analysis.stages.detailed_analysis ?? {})
      .flat()
      .map((item: any) => item.image_url)
      .filter(Boolean);
    
    // console.log('Analyzed Images:', analyzedImages);

    const totalPropertyImages = propertyData.overall_analysis.stages.initial_categorization.length;
    const totalAnalyzedImages = analyzedImages.length;
    const totalSkippedImages = totalPropertyImages - totalAnalyzedImages;

    const groupedImages = [];
    for (let i = 0; i < analyzedImages.length; i += 3) {
      groupedImages.push(analyzedImages.slice(i, i + 3));
    }

    // console.log('Total Property Images:', totalPropertyImages);
    // console.log('Total Analyzed Images:', totalAnalyzedImages);
    // console.log('Total Skipped Images:', totalSkippedImages);
    // console.log('Grouped Images:', groupedImages);

    return (
      <>
        <h1 className="text-2xl font-bold mb-6">
          Property Analysis
        </h1>

        {/* Property URL */}
        <div className="mb-6">
          <p className="text-gray-600">Analyzing property:</p>
          <a
            href={propertyData.property_url}
            target="_blank"
            rel="noopener noreferrer"
            className="text-indigo-600 hover:underline break-words"
          >
            {propertyData.property_url}
          </a>
          <ShareButton shareUrl={propertyData.property_url} />
        </div>

        {/* Main Image Carousel (Analyzed Images) */}
        <div className="mb-8">
          <Carousel className="relative w-full">
            <CarouselContent>
              {groupedImages.map((imageGroup, index) => (
                <CarouselItem key={index}>
                  <div className="flex gap-2 md:gap-4">
                  {imageGroup.map((imageUrl, idx) => (
                    <div
                      key={idx}
                      className="relative w-full md:w-1/3"
                    >
                    {/* <div className="relative pt-[75%] md:pt-[66.67%]"> */}
                    <div className="relative h-48 sm:h-64 w-full">
                      <img
                        src={imageUrl}
                        alt={`Property image ${index + 1}`}
                        className="absolute inset-0 w-full h-full object-cover rounded"
                      />
                    </div>
                  </div>
                  ))}
                </div>
                </CarouselItem>
              ))}
            </CarouselContent>
            <CarouselPrevious className="absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-2 shadow hover:bg-white" >
              {/* Left Arrow Icon */}
            </CarouselPrevious>
            <CarouselNext className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-2 shadow hover:bg-white" >
              {/* Right Arrow Icon */}
            </CarouselNext>
            {/* Indicators (Optional) */}
            {/* <CarouselIndicators /> */}
          </Carousel>
        </div>

        {totalSkippedImages > 0 && (
          <Alert variant="info" className="mb-6">
            <AlertTitle>Notice</AlertTitle>
            <AlertDescription>
              {totalSkippedImages} out of {totalPropertyImages} images were not included in the analysis.
              These images may have been categorized as "others" or could not be analyzed due to insufficient data.
            </AlertDescription>
          </Alert>
        )}

        {/* Tabs */}
        <Tabs defaultValue="summary" className="w-full">
          <div className="overflow-x-auto pb-2">
            <TabsList className="w-max min-w-full inline-flex mb-6">
              <TabsTrigger 
                value="summary" 
                className="flex-1 min-w-[100px] whitespace-nowrap"
              >
                Summary
              </TabsTrigger>
              <TabsTrigger 
                value="detailed" 
                className="flex-1 min-w-[100px] whitespace-nowrap"
              >
                Detailed Analysis
              </TabsTrigger>
              <TabsTrigger 
                value="property_data" 
                className="flex-1 min-w-[100px] whitespace-nowrap"
              >
                Property Data
              </TabsTrigger>
              <TabsTrigger 
                value="floorplan" 
                className="flex-1 min-w-[100px] whitespace-nowrap"
              >
                Floorplan Analysis 1
              </TabsTrigger>
              <TabsTrigger 
                value="floorplan2" 
                className="flex-1 min-w-[100px] whitespace-nowrap"
              >
                Floorplan Analysis 2
              </TabsTrigger>
              <TabsTrigger 
                value="compare" 
                className="flex-1 min-w-[100px] whitespace-nowrap"
                onClick={handleCompare}
              >
                Compare
              </TabsTrigger>
            </TabsList>
          </div>
          
          {/* Property Data Tab */}
          <TabsContent value="property_data">
            <div className="space-y-4">
              <div>
                <h2 className="text-xl font-semibold mb-2">Address</h2>
                <p>{propertyData.address}</p>
              </div>
              <div>
                <h2 className="text-xl font-semibold mb-2">Price</h2>
                <p>{propertyData.price}</p>
              </div>
              <div>
                <h2 className="text-xl font-semibold mb-2">Bedrooms</h2>
                <p>{propertyData.bedrooms}</p>
              </div>
              <div>
                <h2 className="text-xl font-semibold mb-2">Bathrooms</h2>
                <p>{propertyData.bathrooms}</p>
              </div>
              <div>
                <h2 className="text-xl font-semibold mb-2">Size</h2>
                <p>{propertyData.size}</p>
              </div>
              <div>
                <h2 className="text-xl font-semibold mb-2">House Type</h2>
                <p>{propertyData.house_type}</p>
              </div>
              <div>
                <h2 className="text-xl font-semibold mb-2">Agent</h2>
                <p>{propertyData.agent}</p>
              </div>
              <div>
                <h2 className="text-xl font-semibold mb-2">Description</h2>
                {/* <p>{propertyData.description}</p> */}
                <p className="whitespace-pre-wrap">
                  {propertyData.reviewed_description}
                </p>
              </div>    
              {propertyData.sentiment_analysis && (
                <div>
                  <h2 className="text-xl font-semibold mb-2">Sentiment Analysis</h2>

                  {/* Overall sentiment & score */}
                  <p className="font-semibold">Overall Sentiment: {propertyData.sentiment_analysis.overall_sentiment}</p>
                  <p className="mb-2">Score: {propertyData.sentiment_analysis.sentiment_score}</p>

                  {/* Tone analysis */}
                  {propertyData.sentiment_analysis.tone_analysis && (
                    <div className="mb-2">
                      <p className="font-semibold">Tone Analysis:</p>
                      {Object.entries(propertyData.sentiment_analysis.tone_analysis).map(([toneKey, toneValue]) => (
                        <p key={toneKey}>
                          {toneKey}: {toneValue}
                        </p>
                      ))}
                    </div>
                  )}

                  {/* Key phrases */}
                  {Array.isArray(propertyData.sentiment_analysis.key_phrases) && (
                    <div className="mb-2">
                      <p className="font-semibold">Key Phrases:</p>
                      <ul className="list-disc ml-4">
                        {propertyData.sentiment_analysis.key_phrases.map((phrase, index) => (
                          <li key={index}>{phrase}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {/* Improvement suggestions */}
                  {Array.isArray(propertyData.sentiment_analysis.improvement_suggestions) && (
                    <div className="mb-2">
                      <p className="font-semibold">Improvement Suggestions:</p>
                      <ul className="list-disc ml-4">
                        {propertyData.sentiment_analysis.improvement_suggestions.map((suggestion, index) => (
                          <li key={index}>{suggestion}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {/* Marketing effectiveness */}
                  {propertyData.sentiment_analysis.marketing_effectiveness && (
                    <div className="mb-2">
                      <p className="font-semibold">Marketing Effectiveness:</p>
                      <p>{propertyData.sentiment_analysis.marketing_effectiveness}</p>
                    </div>
                  )}
                </div>
              )}          
              <div>
                <h2 className="text-xl font-semibold mb-2">Images</h2>
                {Array.isArray(propertyData.image_urls) && propertyData.image_urls.length > 0 ? (
                  <p>{propertyData.image_urls.length} images</p>
                ) : (
                  <p>No images available.</p>
                )}
              </div>
              <div>
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                  {propertyData.image_urls.map((imageUrl, index) => (
                    <img key={index} src={imageUrl} alt={`Image ${index + 1}`} className="w-full h-auto rounded" />
                  ))}
                </div>
              </div>
              {/* Floorplans */}
              <div>
                <h2 className="text-xl font-semibold mb-2">Floorplans</h2>
                {Array.isArray(propertyData.floorplan_urls) && propertyData.floorplan_urls.length > 0 ? (
                  <p>{propertyData.floorplan_urls.length} floorplans</p>
                ) : (
                  <p>No floorplans available.</p>
                )}
              </div>
              {Array.isArray(propertyData.floorplan_urls) && propertyData.floorplan_urls.length > 0 && (
                <div>
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                    {propertyData.floorplan_urls.map((floorplanUrl, index) => (
                      <img key={index} src={floorplanUrl} alt={`Floorplan ${index + 1}`} className="w-full h-auto rounded" />
                    ))}
                  </div>
                </div>
              )}
            </div>
          </TabsContent>

          {/* Summary Tab */}
          <TabsContent value="summary">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Overall Condition Card */}
              <Card>
                <CardHeader>
                  <CardTitle>Overall Condition</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-3xl font-bold mb-4">
                    {/* {propertyData.stages.overall_condition?.overall_condition_label ?? 'N/A'} */}
                    {propertyData.overall_analysis.stages.overall_condition?.overall_condition_label ?? 'N/A'} ({propertyData.overall_analysis.stages.overall_condition?.average_score}%)
                  </p>
                  <div className="space-y-2">
                    <ConditionScale 
                      score={propertyData.overall_analysis.stages.overall_condition?.average_score ?? 0}
                      label={propertyData.overall_analysis.stages.overall_condition?.overall_condition_label ?? 'N/A'}
                    />
                    <p>
                      <span className="font-semibold">Confidence:</span>{" "}
                      {propertyData.overall_analysis.stages.overall_condition?.confidence ?? 'N/A'}
                    </p>
                    <p>
                      <span className="font-semibold">Areas of Concern:</span>{" "}
                      {propertyData.overall_analysis.stages.overall_condition?.areas_of_concern ?? 'N/A'}
                    </p>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Description Analysis</CardTitle>
                </CardHeader>
                <CardContent>
                  {propertyData.description_analysis?.label}
                </CardContent>
              </Card>
              {/* Condition Distribution Chart */}
              <Card>
                <CardHeader>
                  <CardTitle>Condition Distribution</CardTitle>
                </CardHeader>
                <CardContent>
                <ResponsiveContainer width="100%" height={250}>
                  <BarChart data={conditionData} margin={{ bottom: 60 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                      <XAxis
                        dataKey="name"
                        interval={0} // Ensures all labels are shown
                        tick={CustomTick} // Improves readability
                        height={60} // Provides more space for angled labels
                      />
                      <YAxis allowDecimals={false} domain={[0, Math.max(totalAssessments, 10)]} />
                      <Tooltip content={({ payload, }) => {
                        if (!payload || payload.length === 0) return null;
                        const data = payload[0].payload;
                        return (
                          <div className="bg-white border p-2 rounded shadow">
                            <p className="font-semibold">{data.name}</p>
                            <p>{data.value} assessments</p>
                            {data.name === "Others" && (
                              <p className="text-sm text-gray-600">Includes miscellaneous spaces not categorized.</p>
                            )}
                          </div>
                        );
                      }} />
                      <Bar dataKey="value" fill="#6366F1" />
                    </BarChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>

              {/* Detailed Explanation */}
              <Card className="col-span-1 md:col-span-2">
                <CardHeader>
                  <CardTitle>Detailed Explanation</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-gray-700 leading-relaxed space-y-4">
                    {propertyData.overall_analysis.stages.overall_condition?.explanation ? (
                      <>
                        {propertyData.overall_analysis.stages.overall_condition.explanation.split('\n').map((para, idx) => (
                          <p key={idx} className="mb-2 flex items-start">
                            <span>{para}</span>
                          </p>
                        ))}
                      </>
                    ) : (
                      <p>No explanation available.</p>
                    )}
                  </div>
                </CardContent>

              </Card>
            </div>
          </TabsContent>

          {/* Detailed Analysis Tab */}
          <TabsContent value="detailed">
            <div className="space-y-8">
              {Object.entries(propertyData.overall_analysis.stages.detailed_analysis ?? {}).map(
                ([key, analysis]) => (
                  <Card key={key}>
                    <CardHeader>
                      <CardTitle>
                        {(key === "others" ? "Others" : key)
                          .replace(/_/g, " ")
                          .replace(/\b\w/g, (l) => l.toUpperCase())}
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                        {Array.isArray(analysis) && analysis.map((item) => (
                          <div key={item.image_id} className="flex space-x-4">
                            <Dialog
                              onOpenChange={(open) =>
                                !open && setSelectedImage(null)
                              }
                            >
                              <DialogTrigger asChild>
                                <div
                                  className="w-32 h-32 flex-shrink-0 cursor-pointer"
                                  onClick={() =>
                                    setSelectedImage(item.image_url)
                                  }
                                >
                                  <img
                                    src={item.image_url}
                                    alt={`Image ${item.image_number}`}
                                    className="w-full h-full object-cover rounded"
                                  />
                                </div>
                              </DialogTrigger>
                              {selectedImage && (
                                <DialogContent className="w-full max-w-3xl">
                                {/* Dialog Title (Hidden Visually) */}
                                <DialogTitle>
                                  <VisuallyHidden>Full-size Property Image</VisuallyHidden>
                                </DialogTitle>
                                
                                {/* Dialog Description */}
                                <DialogDescription>
                                  This is a full-size view of the property image number {item.image_number}.
                                </DialogDescription>
                                
                                {/* Image */}
                                <img
                                  src={selectedImage}
                                  alt={`Full-size image of property ${item.image_number}`}
                                  className="w-full h-auto max-h-[80vh] object-contain"
                                />
                                </DialogContent>                            
                              )}
                            </Dialog>
                            <div>
                              <p className="text-lg font-semibold mb-2">
                                Image {item.image_number}: {item.condition_label} ({item.condition_score}%)
                              </p>
                              <p className="text-gray-700">{item.reasoning}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                )
              )}
            </div>
          </TabsContent>

          {/* Floorplans */}
          <TabsContent value="">
            <div>
                <h2 className="text-xl font-semibold mb-2">Floorplans</h2>
                {Array.isArray(propertyData.floorplan_urls) &&
                propertyData.floorplan_urls.length > 0 ? (
                  <p>{propertyData.floorplan_urls.length} floorplans</p>
                ) : (
                  <p>No floorplans available.</p>
                )}
            </div>
            <div>
              {Array.isArray(propertyData.floorplan_urls) &&
                propertyData.floorplan_urls.length > 0 && (
                  <div>
                    <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                      {propertyData.floorplan_urls.map((floorplanUrl, index) => (
                        <img
                          key={index}
                          src={floorplanUrl}
                          alt={`Floorplan ${index + 1}`}
                          className="w-full h-auto rounded"
                        />
                      ))}
                    </div>
                  </div>
                )}
            </div>
          </TabsContent>
          
          {/* Floorplan Analysis Tab */}
          <TabsContent value="floorplan">
            {propertyData?.overall_analysis?.stages?.floorplan_analysis && propertyData.overall_analysis.stages.floorplan_analysis.length > 0 ? (
              <>
                {/* Carousel for Floorplan Images */}
                <div className="mb-8">
                  <Carousel className="relative w-full">
                    <CarouselContent>
                      {propertyData.overall_analysis.stages.floorplan_analysis.map(
                        (floorplan, index) => (
                          <CarouselItem key={index}>
                            <div className="relative h-48 sm:h-64 w-full">
                              <img
                                src={floorplan.url}
                                alt={`Floorplan ${index + 1}`}
                                className="absolute inset-0 w-full h-full object-contain rounded"
                              />
                            </div>
                          </CarouselItem>
                          )
                        )}
                      </CarouselContent>
                      <CarouselPrevious className="absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-2 shadow hover:bg-white" />
                    <CarouselNext className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/80 rounded-full p-2 shadow hover:bg-white" />
                  </Carousel>
                </div>

                {/* Floorplan analysis data (one card per floorplan) */}
                {propertyData.overall_analysis.stages.floorplan_analysis.map(
                  (floorplan, index) => (
                    <Card key={index} className="mb-6">
                      <CardHeader>
                        <CardTitle>
                          Floorplan {index + 1} Analysis
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                          <div>
                            <p>
                              <span className="font-semibold">Color:</span>{" "}
                              {floorplan.analysis.color ?? "N/A"}
                            </p>
                            <p>
                              <span className="font-semibold">
                                Dimension Type:
                              </span>{" "}
                              {floorplan.analysis.dimension_type ?? "N/A"}
                            </p>
                            <p>
                              <span className="font-semibold">Drawing Type:</span>{" "}
                              {floorplan.analysis.drawing_type ?? "N/A"}
                            </p>
                            <p>
                              <span className="font-semibold">
                                Background in Blueprint:
                              </span>{" "}
                              {floorplan.analysis.background_image_in_blueprint
                                ? "Yes"
                                : "No"}
                            </p>
                            <p>
                              <span className="font-semibold">
                                Number of Buildings:
                              </span>{" "}
                              {floorplan.analysis.number_buildings ?? "N/A"}
                            </p>
                          </div>
                          <div>
                            <p>
                              <span className="font-semibold">
                                Number of Floors:
                              </span>{" "}
                              {floorplan.analysis.number_floors ?? "N/A"}
                            </p>
                            <p>
                              <span className="font-semibold">Bay Windows:</span>{" "}
                              {floorplan.analysis.bay_windows ? "Yes" : "No"}
                            </p>
                            <p>
                              <span className="font-semibold">
                                Curved Walls/Windows:
                              </span>{" "}
                              {floorplan.analysis.curved_walls_windows
                                ? "Yes"
                                : "No"}
                            </p>
                            <p>
                              <span className="font-semibold">Garden:</span>{" "}
                              {floorplan.analysis.garden ? "Yes" : "No"}
                            </p>
                            <p>
                              <span className="font-semibold">
                                Total Square Area:
                              </span>{" "}
                              {floorplan.analysis.total_square_area ?? "N/A"}
                            </p>
                          </div>
                        </div>
                        <div className="mt-4">
                          <p>
                            <span className="font-semibold">
                              Main Building Sq. Area:
                            </span>{" "}
                            {floorplan.analysis.main_building_square_area ??
                              "N/A"}
                          </p>
                          <p>
                            <span className="font-semibold">
                              Compass Direction:
                            </span>{" "}
                            {floorplan.analysis.compass_direction ?? "N/A"}
                          </p>
                          <p className="mt-2">
                            <span className="font-semibold">
                              Key Observations:
                            </span>{" "}
                            {floorplan.analysis.key_observations ?? "N/A"}
                          </p>
                        </div>
                      </CardContent>
                    </Card>
                  )
                )}
              </>
              ) : (
                <p>No floorplan analysis data available.</p>
              )}
          </TabsContent>

          <TabsContent value="floorplan2">
            {propertyData?.overall_analysis?.stages?.floorplan_analysis_2 ? (
              <>
                {/* Top-Level Summary Table */}
                <div className="mb-6">
                  <h2 className="text-xl font-semibold mb-2">Property Spaces</h2>
                  <div className="overflow-auto">
                    <table className="table-auto w-full border-collapse">
                      <thead>
                        <tr className="border-b">
                          <th className="px-4 py-2 text-left">Category</th>
                          <th className="px-4 py-2 text-left">Space %</th>
                          <th className="px-4 py-2 text-left">Sq Ft</th>
                          <th className="px-4 py-2 text-left">Sq M</th>
                          <th className="px-4 py-2 text-left">Cost/Space</th>
                          <th className="px-4 py-2 text-left">Cost/??</th>
                        </tr>
                      </thead>
                      <tbody>
                        {propertyData.overall_analysis.stages.floorplan_analysis_2.propertySpaces.map(
                          (space: any, idx: number) => (
                            <tr key={idx} className="border-b">
                              <td className="px-4 py-2">{space.category}</td>
                              <td className="px-4 py-2">{space.spacePercentage}%</td>
                              <td className="px-4 py-2">{space.sqft}</td>
                              <td className="px-4 py-2">{space.sqm}</td>
                              <td className="px-4 py-2">{space.costSpace}</td>
                              <td className="px-4 py-2">{space.otherCost}</td>
                            </tr>
                          )
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* Detailed View Table */}
                <div>
                  <h2 className="text-xl font-semibold mb-2">Detailed View</h2>
                  <div className="overflow-auto">
                    <table className="table-auto w-full border-collapse">
                      <thead>
                        <tr className="border-b">
                          <th className="px-4 py-2 text-left">Building/Floor</th>
                          <th className="px-4 py-2 text-left">Space Type</th>
                          <th className="px-4 py-2 text-left">Space Name</th>
                          <th className="px-4 py-2 text-left">Area Sqft %</th>
                          <th className="px-4 py-2 text-left">Area Sqft</th>
                          <th className="px-4 py-2 text-left">Area Sqm</th>
                          <th className="px-4 py-2 text-left">Price Per Space</th>
                        </tr>
                      </thead>
                      <tbody>
                        {propertyData.overall_analysis.stages.floorplan_analysis_2.detailedView.map(
                          (item: any, idx: number) => (
                            <tr key={idx} className="border-b">
                              <td className="px-4 py-2">{item.floor}</td>
                              <td className="px-4 py-2">{item.spaceType}</td>
                              <td className="px-4 py-2">{item.spaceName}</td>
                              <td className="px-4 py-2">{item.areaSqftPercentage}%</td>
                              <td className="px-4 py-2">{item.areaSqft}</td>
                              <td className="px-4 py-2">{item.areaSqm}</td>
                              <td className="px-4 py-2">{item.pricePerSpace}</td>
                            </tr>
                          )
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>
              </>
            ) : (
              <p>No Floorplan Analysis 2 data available.</p>
            )}
          </TabsContent>


          <TabsContent value="compare" />
        </Tabs>
      </>
    );
  };

  return (
    <div className="container mx-auto p-4 max-w-6xl">
      {/* Analysis Form */}
      {!isSharedView && !id && (
        authenticated ? (
          <form onSubmit={handleSubmit} className="mb-8">
            <div className="flex flex-col sm:flex-row sm:items-center space-y-4 sm:space-y-0 sm:space-x-4">
              <Input
                type="text"
                value={url}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUrl(e.target.value)}
                placeholder="Enter property URL"
                className="flex-grow"
              />
              <Button
                type="submit"
                disabled={dataLoading}
                className="bg-indigo-600 hover:bg-indigo-700 text-white"
              >
                {dataLoading ? "Analyzing..." : "Analyze"}
              </Button>
            </div>
          </form>
        ) : (
          <div>Please sign in to analyze a property.</div>
        )
      )}

      {/* Error Alert */}
      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Progress Indicator */}
      {!isSharedView && analysisInProgress && (
        <div className="flex flex-col items-center justify-center min-h-screen space-y-4">
          <p className="text-gray-700 text-center px-4 max-w-md">
            We have a team of AI agents analyzing your property, this should be finished in a few minutes, 
            you will receive a message on WhatsApp when the analysis is ready.
          </p>
          {progressUpdate && (
          <div className="w-full max-w-md px-4">
            <p className="mb-4 text-gray-700 text-center">
              {progressUpdate.stage.charAt(0).toUpperCase() + progressUpdate.stage.slice(1)}: {progressUpdate.message}
            </p>
            <div className="w-full h-2 bg-gray-200 rounded overflow-hidden">
              <div
                className="h-full bg-gradient-to-r from-blue-500 to-green-500 bg-[length:200%_100%] animate-gradient"
                style={{
                  width: `${progressUpdate.progress}%`,
                  transition: 'width 0.5s ease-in-out',
                }}
              />
            </div>
          </div>
          )}
        </div>
      )}

      {/* Fetching Results Indicator */}
      {!isSharedView && fetchingResults && !analysisComplete && (
        <div className="mb-6">
          <p className="mb-2 text-gray-700">
            Fetching analysis results... Status: {analysisStatus}
          </p>
          <Progress value={analysisProgress} className="w-full h-2 bg-gray-200" />
        </div>
      )}

      {/* Loading Indicator */}
      {dataLoading && (
        <div className="mb-6">
          <p className="text-gray-700">Loading property data...</p>
        </div>
      )}

      {/* Render Analysis */}
      {!dataLoading && !fetchingResults && propertyData && renderAnalysis()}
    </div>
  );
};
  

export default PropertyAnalysis;

// src/components/PropertyAnalysisForm.jsx
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { zodResolver } from "@hookform/resolvers/zod";
import React from "react";
import { useForm } from "react-hook-form";
import * as z from "zod";

const formSchema = z.object({
  url: z.string().url({ message: "Please enter a valid URL" }),
});

const PropertyAnalysisForm = ({ onSubmit }) => {
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      url: "",
    },
  });

  const handleSubmit = (data) => {
    onSubmit(data.url);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="url"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Property URL</FormLabel>
              <FormControl>
                <Input placeholder="https://example.com/property" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Analyze Property</Button>
      </form>
    </Form>
  );
};

export default PropertyAnalysisForm;


// src/components/PropertyList.tsx
// PropertyList.tsx
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { GitCompare, Plus } from 'lucide-react';
import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axiosInstance from "../utils/axiosConfig";

interface Property {
  id: number;
  url: string;
  created_at: string;
  updated_at: string;
  analysis_source: string; // "email" or "original"
}

const PropertyList: React.FC = () => {
  const [properties, setProperties] = useState<Property[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const navigate = useNavigate();
  const [, setAuthenticated] = useState<boolean>(false);

  useEffect(() => {
    const checkAuthentication = async () => {
      try {
        const response = await axiosInstance.get('/api/auth/check-authenticated/');
        if (response.status === 200) {
          setAuthenticated(true);
          fetchProperties();
        } else {
          navigate('/enter-phone');
        }
      } catch (error) {
        console.error('Error checking authentication:', error);
        navigate('/enter-phone');
      }
    };
    checkAuthentication();
  }, [navigate]);

  const fetchProperties = async () => {
    try {
      setLoading(true);
      const response = await axiosInstance.get('/api/orchestration/properties/', {});
      setProperties(Array.isArray(response.data) ? response.data : response.data.results || []);
    } catch (err) {
      console.error('Error fetching properties:', err);
      setError('Failed to fetch properties. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const filteredProperties = properties.filter((property) =>
    property.url.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleCompare = () => {
    navigate("/compare");
  };

  const handleConnectGmail = async () => {
    try {
      const response = await axiosInstance.get('/email/auth/gmail/');
      window.location.href = response.data.redirect_url;
    } catch (error) {
      console.error("Failed to get OAuth URL", error);
    }
  };

  const manualGmailFetch = async () => {
    const response = await axiosInstance.get('/email/manual-fetch/');
    console.log("Fetched property data:", response.data);
  }

  return (
    <div className="container mx-auto p-6 max-w-7xl">
      <h1 className="text-3xl font-bold mb-6 text-gray-800">Property List</h1>
      <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
        <div className="flex gap-3 w-full sm:w-auto">
          <Button onClick={handleConnectGmail} variant="secondary" className="flex items-center">
            Connect Gmail
          </Button>
          <Button onClick={manualGmailFetch} variant="secondary" className="flex items-center">
            Manual Gmail Fetch
          </Button>
          <Button onClick={handleCompare} variant="outline" className="flex items-center">
            <GitCompare className="w-4 h-4 mr-2" />
            Compare
          </Button>
          <Link to="/analyze">
            <Button className="bg-indigo-600 hover:bg-indigo-700 text-white flex items-center">
              <Plus className="w-4 h-4 mr-2" />
              New Analysis
            </Button>
          </Link>
        </div>
        <div className="relative w-full sm:w-auto flex-grow">
          <Input
            type="text"
            placeholder="Search properties..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 pr-4 py-2 w-full"
          />
        </div>
      </div>

      {loading ? (
        <div className="text-center py-8 text-gray-600">Loading properties...</div>
      ) : error ? (
        <Alert variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      ) : filteredProperties.length === 0 ? (
        <Alert>
          <AlertDescription>
            No properties found. Try adding some properties or adjusting your search.
          </AlertDescription>
        </Alert>
      ) : (
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-1/3">URL</TableHead>
                <TableHead>Analysis Source</TableHead>
                <TableHead>Created At</TableHead>
                <TableHead>Updated At</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredProperties.map((property) => (
                <TableRow key={property.id} className="hover:bg-gray-50">
                  <TableCell className="font-medium">
                    <Link
                      to={`/property-analysis/${property.id}`}
                      className="text-indigo-600 hover:text-indigo-800 hover:underline"
                    >
                      {property.url}
                    </Link>
                  </TableCell>
                  <TableCell className="capitalize">{property.analysis_source}</TableCell>
                  <TableCell>{new Date(property.created_at).toLocaleString()}</TableCell>
                  <TableCell>{new Date(property.updated_at).toLocaleString()}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      )}
    </div>
  );
};

export default PropertyList;


// src/components/AnalysisProgress.tsx
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Progress } from "@/components/ui/progress";
import React from 'react';
import { ProgressUpdate } from '../types';

interface AnalysisProgressProps {
  error: string;
  analysisInProgress: boolean;
  progressUpdate: ProgressUpdate | null;
  fetchingResults: boolean;
  dataLoading: boolean;
}

export const AnalysisProgress: React.FC<AnalysisProgressProps> = ({
  error,
  analysisInProgress,
  progressUpdate,
  fetchingResults,
  dataLoading
}) => {
  return (
    <>
      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {analysisInProgress && progressUpdate && (
        <div className="flex items-center justify-center min-h-screen">
          <div className="w-full max-w-md px-4">
            <p className="mb-4 text-gray-700 text-center">
              {progressUpdate.stage.charAt(0).toUpperCase() + progressUpdate.stage.slice(1)}: {progressUpdate.message}
            </p>
            <Progress value={progressUpdate.progress} className="w-full" />
          </div>
        </div>
      )}

      {fetchingResults && (
        <div className="mb-6">
          <p className="mb-2 text-gray-700">Fetching analysis results...</p>
          <Progress value={undefined} className="w-full" />
        </div>
      )}

      {dataLoading && (
        <div className="mb-6">
          <p className="text-gray-700">Loading property data...</p>
          <Progress value={undefined} className="w-full" />
        </div>
      )}
    </>
  );
};

// src/components/PropertyComparisonTable.tsx
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axiosInstance from "../utils/axiosConfig";

interface ColumnConfig {
  name: string;
  display_name: string;
  order: number;
  is_visible: boolean;
}

interface IProperty {
  id: number;
  [key: string]: any; // Allows dynamic property access
}

interface IProperty {
  id: number;
  listing_type?: string;
  address?: string;
  price?: string;
  bedrooms?: number;
  bathrooms?: number;
  size?: string;
  house_type?: string;
  time_on_market?: string;
  created_at?: string;
}

const PropertyComparisonTable: React.FC = () => {
  const [columns, setColumns] = useState<ColumnConfig[]>([]);
  const [properties, setProperties] = useState<IProperty[]>([]);
  const [filteredProperties, setFilteredProperties] = useState<IProperty[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>("");
  const [listingFilter, setListingFilter] = useState<string>("");
  const [addressFilter, setAddressFilter] = useState<string>("");
  const [houseTypeFilter, setHouseTypeFilter] = useState<string>("");
  const [priceFilter, setPriceFilter] = useState<string>("");
  const [sortColumn, setSortColumn] = useState<string>('');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');

  const navigate = useNavigate();

  const handleSort = (columnName: string) => {
    if (sortColumn === columnName) {
      // Toggle asc/desc
      setSortOrder((prev) => (prev === 'asc' ? 'desc' : 'asc'));
    } else {
      // Switch to a new column, default to asc
      setSortColumn(columnName);
      setSortOrder('asc');
    }
  };

  useEffect(() => {
    const fetchColumnConfig = async () => {
      try {
        let allColumns: ColumnConfig[] = [];
        let nextUrl = '/api/orchestration/column-configs/?is_visible=true';
        
        while (nextUrl) {
          const response = await axiosInstance.get(nextUrl);
          allColumns = [...allColumns, ...response.data.results];
          nextUrl = response.data.next; // URL for next page
        }

        console.log("This is all columns: ", allColumns)

        setColumns(allColumns)
      } catch (err) {
        setError("Failed to load column configuration.");
      }
    };
    fetchColumnConfig();
  }, []);

  useEffect(() => {
    const fetchProperties = async () => {
      try {
        setLoading(true);
        const response = await axiosInstance.get("/api/orchestration/properties/dynamic-columns/");
        console.log("This is all columns 2: ", response.data)
        setProperties(response.data);
        setFilteredProperties(response.data);        
      } catch (err) {
        setError("Failed to load properties.");
      } finally {
        setLoading(false);
      }
    };
    fetchProperties();
  }, [navigate]);

  useEffect(() => {
    let temp = [...properties];

    // Filter listing_type
    if (listingFilter) {
      temp = temp.filter((p) => {
        const listingType = p.listing_type?.toLowerCase();
        return listingType === listingFilter.toLowerCase();
      });
    }

    if (addressFilter) {
      temp = temp.filter((p) =>
        p.address?.toLowerCase().includes(addressFilter.toLowerCase())
      );
    }

    if (houseTypeFilter) {
      temp = temp.filter((p) =>
        p.house_type?.toLowerCase().includes(houseTypeFilter.toLowerCase())
      );
    }

    if (priceFilter) {
      const maxPrice = parseFloat(priceFilter);
      if (!isNaN(maxPrice)) {
        temp = temp.filter((p) => {
          const parsed = p.price ? parseFloat(p.price) : 0;
          return parsed <= maxPrice;
        });
      }
    }

    if (sortColumn) {
      temp.sort((a, b) => {
        let valA = a[sortColumn];
        let valB = b[sortColumn];
  
        // If the column is numeric, convert to numbers
        const numA = parseFloat(valA) || 0;
        const numB = parseFloat(valB) || 0;
  
        // If *both* parse as valid numbers, sort numerically
        if (!isNaN(numA) && !isNaN(numB) && !(isNaN(numA) && isNaN(numB))) {
          return sortOrder === 'asc' ? numA - numB : numB - numA;
        }
        
        // Otherwise fall back to string sort
        valA = valA?.toString().toLowerCase() || '';
        valB = valB?.toString().toLowerCase() || '';
  
        if (valA < valB) return sortOrder === 'asc' ? -1 : 1;
        if (valA > valB) return sortOrder === 'asc' ? 1 : -1;
        return 0;
      });
    }

    setFilteredProperties(temp);
  }, [listingFilter, addressFilter, houseTypeFilter, priceFilter, properties, sortColumn, sortOrder]);

  return (
    <div className="px-6 py-8 bg-white">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-2xl font-semibold">Property Comparison</h1>
      </div>

      {error && <p className="text-red-500 mb-4">{error}</p>}
      {loading && <p>Loading properties...</p>}
      
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div className="flex flex-col">
          <label className="mb-2 text-sm text-gray-600">Listing Type:</label>
          <select
            className="px-4 py-2 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={listingFilter}
            onChange={(e) => setListingFilter(e.target.value)}
          >
            <option value="">--All--</option>
            <option value="sales">Sales</option>
            <option value="letting">Letting</option>
          </select>
        </div>
        <div className="flex flex-col">
          <label className="mb-2 text-sm text-gray-600">Address:</label>
          <input
            type="text"
            className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={addressFilter}
            onChange={(e) => setAddressFilter(e.target.value)}
            placeholder="Search address..."
          />
        </div>
        <div className="flex flex-col">
          <label className="mb-2 text-sm text-gray-600">House Type:</label>
          <input
            type="text"
            className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={houseTypeFilter}
            onChange={(e) => setHouseTypeFilter(e.target.value)}
            placeholder="e.g. detached"
          />
        </div>
        <div className="flex flex-col">
          <label className="mb-2 text-sm text-gray-600">Max Price:</label>
          <input
            type="number"
            className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={priceFilter}
            onChange={(e) => setPriceFilter(e.target.value)}
            placeholder="1000000"
          />
        </div>
      </div>

      {!loading && columns.length > 0 && filteredProperties.length > 0 && (
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="bg-gray-50">
                {columns.map((column) => (
                  <th
                    key={column.name}
                    className="px-4 py-3 text-left text-sm font-medium text-gray-600"
                    onClick={() => handleSort(column.name)}
                  >
                    {column.display_name}
                    {/* Show an arrow if this column is actively sorted */}
                    {sortColumn === column.name && (
                      sortOrder === 'asc' ? ' ▲' : ' ▼'
                    )}
                  </th>
                ))}
                <th className="px-4 py-3 text-left text-sm font-medium text-gray-600">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {filteredProperties.map((prop, index) => (
                <tr key={`property-${index}-${prop.address}`} className="hover:bg-gray-50">
                  {columns.map((column) => (
                    <td
                      key={column.name}
                      className="px-4 py-3 text-sm text-gray-900"
                    >
                      {column.name === 'created_at'
                        ? prop[column.name]?.slice(0, 10)
                        : prop[column.name]}
                    </td>
                  ))}
                  <td className="px-4 py-3">
                    <button
                      className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
                      onClick={() => navigate(`/property-analysis/${prop.id}`)}
                    >
                      View Analysis
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {!loading && filteredProperties.length === 0 && (
        <p className="text-gray-500 text-center py-8">No properties found matching your filters.</p>
      )}
    </div>
  );
};

export default PropertyComparisonTable;

// src/components/ImageGallery.tsx
// import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
// import { useState } from "react";

// interface ImageGalleryProps {
//   images: string[];
// }

// export const ImageGallery: React.FC<ImageGalleryProps> = ({ images }) => {
//   const [selectedImage, setSelectedImage] = useState<string | null>(null);

//   return (
//     <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
//       {images.map((imageUrl, index) => (
//         <div
//           key={index}
//           className="aspect-square cursor-pointer overflow-hidden rounded-lg"
//           onClick={() => setSelectedImage(imageUrl)}
//         >
//           <img
//             src={imageUrl}
//             alt={`Image ${index + 1}`}
//             className="w-full h-full object-cover hover:scale-105 transition-transform"
//           />
//         </div>
//       ))}

//       <Dialog open={!!selectedImage} onOpenChange={() => setSelectedImage(null)}>
//         <DialogContent className="max-w-4xl">
//           <DialogTitle>Full Size Image</DialogTitle>
//           {selectedImage && (
//             <img
//               src={selectedImage}
//               alt="Full size view"
//               className="w-full h-auto max-h-[80vh] object-contain"
//             />
//           )}
//         </DialogContent>
//       </Dialog>
//     </div>
//   );
// };


// src/components/ShareButton.tsx
import { Button } from "@/components/ui/button";
import React, { useState } from 'react';

interface CopyShareButtonProps {
  shareUrl: string;
}

const ShareButton: React.FC<CopyShareButtonProps> = ({ shareUrl }) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(shareUrl);
      setCopied(true);
      // Hide notification after 2 seconds
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error("Failed to copy text:", error);
    }
  };

  return (
    <div className="flex flex-col items-center">
      <Button onClick={handleCopy}>Copy Share URL</Button>
      {copied && (
        <p className="mt-2 text-green-600 text-sm">
          Link copied to clipboard!
        </p>
      )}
    </div>
  );
};

export default ShareButton;


// src/components/PropertyAnalysis2.tsx
// import {
//     Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious
// } from "@/components/ui";
// import React, { useEffect, useState } from "react";
// import { useParams } from "react-router-dom";
// import { useAuth } from "../components/contexts/AuthContext";
// import { onMessage, removeMessageListener } from "../services/websocketServices";
// import axiosInstance from "../utils/axiosConfig";

// // Type definitions moved to separate interfaces
// interface AnalysisStages {
//   initial_categorization: Array<{
//     category: string;
//     details: {
//       room_type?: string;
//       exterior_type?: string;
//       others?: string;
//     };
//   }>;
//   grouped_images: {
//     [key: string]: {
//       [key: string]: number[];
//     };
//   };
//   merged_images: {
//     [key: string]: string[];
//   };
//   detailed_analysis: {
//     [key: string]: Array<DetailedAnalysisItem>;
//   };
//   overall_condition: OverallCondition;
//   floorplan_analysis?: FloorplanAnalysis[];
// }

// interface DetailedAnalysisItem {
//   condition_label: string;
//   condition_score: number;
//   image_id: number;
//   image_number: number;
//   image_url: string;
//   reasoning: string;
//   similarities: { [key: string]: number };
// }

// interface OverallCondition {
//   overall_condition_label: string;
//   average_score: number;
//   label_distribution: { [key: string]: number };
//   total_assessments: number;
//   areas_of_concern: number;
//   confidence: string;
//   explanation: string;
// }

// interface FloorplanAnalysis {
//   url: string;
//   analysis: {
//     color: string;
//     dimension_type: string;
//     drawing_type: string;
//     background_image_in_blueprint: boolean;
//     number_buildings: number;
//     number_floors: number;
//     bay_windows: boolean;
//     curved_walls_windows: boolean;
//     garden: boolean;
//     total_square_area: string;
//     main_building_square_area: string;
//     compass_direction: string;
//     key_observations: string;
//   };
// }

// // Extracted components for better organization
// const ProgressIndicator: React.FC<{
//   progressUpdate: ProgressUpdate | null;
// }> = ({ progressUpdate }) => {
//   if (!progressUpdate) return null;
  
//   return (
//     <div className="w-full max-w-md px-4">
//       <p className="mb-4 text-gray-700 text-center">
//         {progressUpdate.stage.charAt(0).toUpperCase() + progressUpdate.stage.slice(1)}: {progressUpdate.message}
//       </p>
//       <div className="w-full h-2 bg-gray-200 rounded overflow-hidden">
//         <div
//           className="h-full bg-gradient-to-r from-blue-500 to-green-500 bg-[length:200%_100%] animate-gradient"
//           style={{
//             width: `${progressUpdate.progress}%`,
//             transition: 'width 0.5s ease-in-out',
//           }}
//         />
//       </div>
//     </div>
//   );
// };

// const ImageCarousel: React.FC<{
//   images: string[];
// }> = ({ images }) => {
//   const groupedImages = [];
//   for (let i = 0; i < images.length; i += 3) {
//     groupedImages.push(images.slice(i, i + 3));
//   }

//   return (
//     <Carousel className="relative w-full">
//       <CarouselContent>
//         {groupedImages.map((imageGroup, index) => (
//           <CarouselItem key={index}>
//             <div className="flex gap-2 md:gap-4">
//               {imageGroup.map((imageUrl, idx) => (
//                 <div key={idx} className="relative w-full md:w-1/3">
//                   <div className="relative h-48 sm:h-64 w-full">
//                     <img
//                       src={imageUrl}
//                       alt={`Property image ${index * 3 + idx + 1}`}
//                       className="absolute inset-0 w-full h-full object-cover rounded"
//                     />
//                   </div>
//                 </div>
//               ))}
//             </div>
//           </CarouselItem>
//         ))}
//       </CarouselContent>
//       <CarouselPrevious />
//       <CarouselNext />
//     </Carousel>
//   );
// };

// // Custom hooks for data fetching and WebSocket handling
// const usePropertyData = (id: string, shareToken?: string) => {
//   const [data, setData] = useState<PropertyData | null>(null);
//   const [error, setError] = useState<string>("");
//   const [loading, setLoading] = useState<boolean>(false);

//   const fetchData = async () => {
//     setLoading(true);
//     try {
//       const endpoint = shareToken 
//         ? `/api/orchestration/properties/${id}/shared/${shareToken}/`
//         : `/api/orchestration/properties/${id}/`;
//       const response = await axiosInstance.get(endpoint);
//       setData(response.data);
//     } catch (error) {
//       setError("Failed to fetch property data. Please try again.");
//       console.error("Error fetching property data:", error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     if (id) {
//       fetchData();
//     }
//   }, [id, shareToken]);

//   return { data, error, loading, refetch: fetchData };
// };

// const useWebSocketConnection = (taskId: string | undefined, isSharedView: boolean) => {
//   const { isConnected, connectToWebSocket } = useAuth();
//   const [progressUpdate, setProgressUpdate] = useState<ProgressUpdate | null>(null);

//   useEffect(() => {
//     if (!isConnected && !isSharedView) {
//       connectToWebSocket();
//     }

//     if (!isSharedView && taskId) {
//       const handleMessage = (message: any) => {
//         if (message.type === 'analysis_progress') {
//           setProgressUpdate(message.message);
//         }
//       };

//       onMessage(handleMessage);
//       return () => removeMessageListener(handleMessage);
//     }
//   }, [taskId, isConnected, isSharedView]);

//   return { progressUpdate };
// };

// // Main component with improved organization
// const PropertyAnalysis: React.FC = () => {
//   const { id, taskId, shareToken } = useParams<{ id: string; taskId?: string; shareToken?: string }>();
//   const isSharedView = !!shareToken;
  
//   const { data: propertyData, error, loading, refetch } = usePropertyData(id ?? "", shareToken);
//   const { progressUpdate } = useWebSocketConnection(taskId, isSharedView);
  
//   // Rest of the component implementation...
//   // (Note: The rest of the implementation remains similar but uses the new helper components and hooks)

//   return (
//     <div className="container mx-auto p-4 max-w-6xl">
//       {/* Existing JSX with improved organization */}
//     </div>
//   );
// };

// export default PropertyAnalysis;

// src/components/CustomTick.tsx
interface CustomTickProps {
  x: number;
  y: number;
  payload: {
    value: string;
    // Add any other properties if needed
  };
  // Optional: Include other props if required
  // stroke?: string;
  // strokeWidth?: number;
}

const CustomTick = ({ x, y, payload }: CustomTickProps): JSX.Element => {
  return (
    <g transform={`translate(${x},${y})`}>
      <text
        x={0}
        y={0}
        dy={16} // Adjusts the vertical position
        textAnchor="end"
        fill="#666"
        transform="rotate(-45)"
        fontSize={12}
      >
        {payload.value}
      </text>
    </g>
  );
};

export default CustomTick;


// src/components/ConditionScale.tsx
interface ConditionScaleProps {
    score: number;
    label: string;
  }

const ConditionScale: React.FC<ConditionScaleProps> = ({ score, label }) => {
  // Ensure the score is between 0 and 100
  const validatedScore = Math.min(Math.max(score, 0), 100);
  
  // Calculate position percentage (0-100) based on score (1-5)
  const getPositionPercentage = (score: number) => {
    return score;
  };

  const getIndicatorColor = (score: number) => {
    if (score >= 75.01) return 'bg-green-600';
    if (score >= 50.01) return 'bg-green-200';
    if (score >= 25.01) return 'bg-yellow-700';
    return 'bg-red-600';
  };

  return (
    <div className="w-full">
      {/* Score Marker */}
      <div className="relative h-1 mb-2">
        <div className="absolute w-full h-full flex">
          {/* Color segments */}
          <div className="flex-1 bg-red-400" />       {/* 0% - 25%: Poor */}
          <div className="flex-1 bg-yellow-400" />    {/* 25.01% - 500%: Below Average */}
          <div className="flex-1 bg-green-200" />      {/* 50.01% - 75%: Above Average */}
          <div className="flex-1 bg-green-400" />     {/* 75.01% - 100%: Excellent */}
        </div>
        {/* Score indicator */}
        <div 
          className={`absolute w-0.5 h-4 -top-1.5 ${getIndicatorColor(validatedScore)}`}
          style={{ 
            left: `${getPositionPercentage(validatedScore)}%`,
            transform: 'translateX(-50%)'
          }}
          title={`Score: ${validatedScore.toFixed(2)}%`}
        />
      </div>
      
      {/* Labels */}
      <div className="flex justify-between text-sm text-gray-600">
        <div className="flex-1 text-center">Poor</div>
        <div className="flex-1 text-center">Below Average</div>
        <div className="flex-1 text-center">Above Average</div>
        <div className="flex-1 text-center">Excellent</div>
      </div>
      
      {/* Score display */}
      <div className="text-center mt-2 font-semibold">
        {label} ({validatedScore.toFixed(2)}%)
      </div>
    </div>
  );
};

export default ConditionScale;

// src/components/DetailedAnalysis.tsx
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
// import { Dialog, DialogContent, DialogDescription, DialogTitle } from "@/components/ui/dialog";
// import { VisuallyHidden } from "@/components/ui/visually-hidden";
// import React, { useState } from 'react';
// import { PropertyData } from '../types';

// interface DetailedAnalysisProps {
//   propertyData: PropertyData;
// }

// export const DetailedAnalysis: React.FC<DetailedAnalysisProps> = ({ propertyData }) => {
//   const [selectedImage, setSelectedImage] = useState<string | null>(null);

//   return (
//     <div className="space-y-8">
//       {Object.entries(propertyData.overall_analysis.stages.detailed_analysis ?? {}).map(
//         ([key, analysis]) => (
//           <Card key={key}>
//             <CardHeader>
//               <CardTitle>
//                 {(key === "others" ? "Others" : key)
//                   .replace(/_/g, " ")
//                   .replace(/\b\w/g, (l) => l.toUpperCase())}
//               </CardTitle>
//             </CardHeader>
//             <CardContent>
//               <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
//                 {Array.isArray(analysis) && analysis.map((item) => (
//                   <div key={item.image_id} className="flex space-x-4">
//                     <div
//                       className="w-32 h-32 flex-shrink-0 cursor-pointer"
//                       onClick={() => setSelectedImage(item.image_url)}
//                     >
//                       <img
//                         src={item.image_url}
//                         alt={`Image ${item.image_number}`}
//                         className="w-full h-full object-cover rounded"
//                       />
//                     </div>
//                     <div>
//                       <p className="text-lg font-semibold mb-2">
//                         Image {item.image_number}: {item.condition_label} ({item.condition_score}%)
//                       </p>
//                       <p className="text-gray-700">{item.reasoning}</p>
//                     </div>
//                   </div>
//                 ))}
//               </div>
//             </CardContent>
//           </Card>
//         )
//       )}

//       <Dialog open={!!selectedImage} onOpenChange={() => setSelectedImage(null)}>
//         <DialogContent className="max-w-4xl">
//           <DialogTitle>
//             <VisuallyHidden>Full-size Property Image</VisuallyHidden>
//           </DialogTitle>
//           <DialogDescription>
//             Detailed view of the selected property image.
//           </DialogDescription>
//           {selectedImage && (
//             <img
//               src={selectedImage}
//               alt="Full size property view"
//               className="w-full h-auto max-h-[80vh] object-contain"
//             />
//           )}
//         </DialogContent>
//       </Dialog>
//     </div>
//   );
// };

// src/components/ui/dialog.jsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


// src/components/ui/carousel.jsx
"use client";
import * as React from "react"
import useEmblaCarousel from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

const CarouselContext = React.createContext(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef((
  {
    orientation = "horizontal",
    opts,
    setApi,
    plugins,
    className,
    children,
    ...props
  },
  ref
) => {
  const [carouselRef, api] = useEmblaCarousel({
    ...opts,
    axis: orientation === "horizontal" ? "x" : "y",
  }, plugins)
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api) => {
    if (!api) {
      return
    }

    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback((event) => {
    if (event.key === "ArrowLeft") {
      event.preventDefault()
      scrollPrev()
    } else if (event.key === "ArrowRight") {
      event.preventDefault()
      scrollNext()
    }
  }, [scrollPrev, scrollNext])

  React.useEffect(() => {
    if (!api || !setApi) {
      return
    }

    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) {
      return
    }

    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    };
  }, [api, onSelect])

  return (
    (<CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}>
      <div
        ref={ref}
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        {...props}>
        {children}
      </div>
    </CarouselContext.Provider>)
  );
})
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    (<div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props} />
    </div>)
  );
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    (<div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props} />)
  );
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    (<Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn("absolute  h-8 w-8 rounded-full", orientation === "horizontal"
        ? "-left-12 top-1/2 -translate-y-1/2"
        : "-top-12 left-1/2 -translate-x-1/2 rotate-90", className)}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}>
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>)
  );
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    (<Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn("absolute h-8 w-8 rounded-full", orientation === "horizontal"
        ? "-right-12 top-1/2 -translate-y-1/2"
        : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90", className)}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}>
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>)
  );
})
CarouselNext.displayName = "CarouselNext"

export { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };


// src/components/ui/form.jsx
"use client";
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { Controller, FormProvider, useFormContext } from "react-hook-form";

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

const FormFieldContext = React.createContext({})

const FormField = (
  {
    ...props
  }
) => {
  return (
    (<FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>)
  );
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

const FormItemContext = React.createContext({})

const FormItem = React.forwardRef(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    (<FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>)
  );
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    (<Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props} />)
  );
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    (<Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props} />)
  );
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    (<p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props} />)
  );
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    (<p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}>
      {body}
    </p>)
  );
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


// src/components/ui/input.jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }


// src/components/ui/button.jsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }


// src/components/ui/table.jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props} />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props} />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props} />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props} />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props} />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props} />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props} />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


// src/components/ui/visually-hidden.jsx
// src/components/ui/VisuallyHidden.jsx
"use client";

import * as React from "react";
import * as VisuallyHiddenPrimitive from "@radix-ui/react-visually-hidden";

import { cn } from "@/lib/utils";

const VisuallyHidden = React.forwardRef(({ className, ...props }, ref) => (
  <VisuallyHiddenPrimitive.Root ref={ref} className={cn(className)} {...props} />
));

VisuallyHidden.displayName = VisuallyHiddenPrimitive.Root.displayName;

export { VisuallyHidden };


// src/components/ui/progress.jsx
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
    {...props}>
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


// src/components/ui/card.jsx
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
};


// src/components/ui/tabs.jsx
import * as TabsPrimitive from "@radix-ui/react-tabs";
import * as React from "react";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsContent, TabsList, TabsTrigger };


// src/components/ui/alert.jsx
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props} />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props} />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props} />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


// src/components/ui/label.jsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


// src/components/contexts/AuthContext.tsx
import React, { createContext, ReactNode, useContext, useEffect, useState } from "react";
import {
  connectWebSocket,
  disconnectWebSocket,
  setWebSocketAccessToken,
} from "../../services/websocketServices";
import axiosInstance from "../../utils/axiosConfig";


interface AuthContextType {
  isConnected: boolean;
  connectToWebSocket: () => void;
  disconnectFromWebSocket: () => void;
  loginWithPhone: (phoneNumber: string) => Promise<void>;
  loginWithToken: (token: string) => Promise<void>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isConnected, setIsConnected] = useState(false);
  // const userPhoneNumber = localStorage.getItem('userPhoneNumber');

  const connectToWebSocket = () => {
    const accessToken = localStorage.getItem('accessToken');
    if (!accessToken) {
      console.error('Access token not found. Cannot connect to WebSocket.');
      return;
    }
    setWebSocketAccessToken(accessToken); // Pass token to WebSocket service
    
    // const websocketUrl = `ws://localhost:8000/ws/analysis-progress/?token=${accessToken}`;
    const websocketUrl = `wss://api.supersami.com/ws/analysis-progress/?token=${accessToken}`;
    // const websocketUrl = `wss://api-test.supersami.com/ws/analysis-progress/?token=${accessToken}`;
    
    connectWebSocket(websocketUrl)
      .then(() => {
        setIsConnected(true);
        console.log("WebSocket connected successfully");
      })
      .catch((error) => {
        console.error("Failed to connect WebSocket:", error);
      });
  };

  const disconnectFromWebSocket = () => {
    disconnectWebSocket();
    setIsConnected(false);
  };

  const loginWithPhone = async (phoneNumber: string) => {
    try {
      const response = await axiosInstance.post('/api/auth/authenticate-phone/', { phone_number: phoneNumber });
      const { access, refresh, message } = response.data;
      localStorage.setItem('accessToken', access);
      localStorage.setItem('refreshToken', refresh);
      console.log(message);
      connectToWebSocket(); // Connect WebSocket after login
    } catch (error) {
      console.error('Login failed:', error);
      throw error;
    }
  };

  const loginWithToken = async (token: string) => {
    try {
      const response = await axiosInstance.post('/api/auth/authenticate-token/', { token });
      const { access, refresh, message } = response.data;
      localStorage.setItem('accessToken', access);
      localStorage.setItem('refreshToken', refresh);
      console.log("Token login:", message);
      connectToWebSocket(); // Connect WebSocket after authentication
    } catch (error) {
      console.error('Authentication with token failed:', error);
      throw error;
    }
  };

  const logout = async () => {
    const refreshToken = localStorage.getItem('refreshToken');

    try {
      await axiosInstance.post('/api/auth/logout/', { refresh: refreshToken });
    } catch (error) {
      console.error('Logout failed:', error);
    } finally {
      localStorage.removeItem('accessToken');
      localStorage.removeItem('refreshToken');
      disconnectFromWebSocket();
      // Optionally, redirect to login page

      // Optionally redirect to login page
      window.location.href = '/enter-phone';
    }
  };

  useEffect(() => {
    const token = localStorage.getItem('accessToken');
    if (token) {
      connectToWebSocket();
    }
    return () => {
      disconnectFromWebSocket();
    };
  }, []);

  return (
    <AuthContext.Provider
      value={{
        isConnected,
        connectToWebSocket,
        disconnectFromWebSocket,
        loginWithPhone,
        loginWithToken,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};

export { AuthContext };


// src/hooks/useAnalysis.ts
// import { useState } from "react";
// import { useAuth } from "../components/contexts/AuthContext";
// import { ProgressUpdate, PropertyData } from "../types";

// export const useAnalysis = (id: string | undefined, taskId: string | undefined, navigate: any) => {
//   const [url, setUrl] = useState<string>("");
//   const [propertyData, setPropertyData] = useState<PropertyData | null>(null);
//   const [error, setError] = useState<string>("");
//   const [dataLoading, setDataLoading] = useState<boolean>(false);
//   const [progressUpdate, setProgressUpdate] = useState<ProgressUpdate | null>(null);
//   const [fetchingResults, setFetchingResults] = useState(false);
//   const [analysisInProgress, setAnalysisInProgress] = useState<boolean>(!!taskId);
//   const { isConnected, connectToWebSocket } = useAuth();

//   // ... Rest of the useAnalysis hook implementation (fetchPropertyData, handleSubmit, etc.)
//   // Include all the existing analysis logic from the original component

//   return {
//     url,
//     setUrl,
//     propertyData,
//     error,
//     dataLoading,
//     analysisInProgress,
//     progressUpdate,
//     fetchingResults,
//     handleSubmit,
//   };
// };

// src/lib/utils.js
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}


// src/assets/react.svg
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

// src/services/websocketServices.ts
let socket: WebSocket | null = null;
let connectedPromise: Promise<void> | null = null;
const messageListeners: Array<(message: any) => void> = [];

// Function to set access token (optional, if needed)
let currentAccessToken: string | null = null;
export const setWebSocketAccessToken = (token: string) => {
  currentAccessToken = token;
};

export const connectWebSocket = (url: string): Promise<void> => {
  if (connectedPromise) {
    return connectedPromise;
  }

  connectedPromise = new Promise((resolve, reject) => {
    socket = new WebSocket(url);

    socket.onopen = () => {
      // console.log('WebSocket connected');
      resolve();
    };

    socket.onclose = () => {
      // console.log('WebSocket disconnected');
      socket = null;
      connectedPromise = null;
    };

    socket.onerror = (error) => {
      console.error('WebSocket error:', error);
      if (error instanceof Event) {
        console.error('Error details:', (error.target as WebSocket).url);
      }
      reject(error);
      connectedPromise = null;
    };

    socket.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data);
        messageListeners.forEach(callback => callback(message));
      } catch (error) {
        console.error('Error parsing WebSocket message:', error);
      }
    };
  });

  return connectedPromise;
};

export const disconnectWebSocket = () => {
  if (socket && socket.readyState === WebSocket.OPEN) {
    socket.close();
  }
  socket = null;
  connectedPromise = null;
};

export const isWebSocketConnected = (): boolean => {
  return socket !== null && socket.readyState === WebSocket.OPEN;
};

export const sendMessage = (message: object): void => {
  if (isWebSocketConnected()) {
    socket!.send(JSON.stringify(message));
  } else {
    console.error('WebSocket is not open');
    throw new Error('WebSocket is not open');
  }
};

export const onMessage = (callback: (message: any) => void): void => {
  messageListeners.push(callback);
};

export const removeMessageListener = (callback: (message: any) => void): void => {
  const index = messageListeners.indexOf(callback);
  if (index !== -1) {
    messageListeners.splice(index, 1);
  }
};


